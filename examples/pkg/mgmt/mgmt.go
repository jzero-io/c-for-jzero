// THE AUTOGENERATED LICENSE. ALL THE RIGHTS ARE RESERVED BY ROBOTS.

// WARNING: This file has automatically been generated on Tue, 30 Jul 2024 12:57:57 CST.
// Code generated by https://git.io/c-for-go. DO NOT EDIT.

package mgmt

/*
#cgo CFLAGS: -I.
#include "xengine_mgmt_op.h"
#include <stdlib.h>
#include "cgo_helpers.h"
*/
import "C"
import (
	"runtime"
	"unsafe"
)

// XENGINE_MgmtCreateContext function as declared in mgmt/xengine_mgmt_op.h:270
func XENGINE_MgmtCreateContext(pConfigFile []byte, pPassFile []byte) int32 {
	cpConfigFile, cpConfigFileAllocMap := copyPCharBytes((*sliceHeader)(unsafe.Pointer(&pConfigFile)))
	cpPassFile, cpPassFileAllocMap := copyPCharBytes((*sliceHeader)(unsafe.Pointer(&pPassFile)))
	__ret := C.XENGINE_MgmtCreateContext(cpConfigFile, cpPassFile)
	runtime.KeepAlive(cpPassFileAllocMap)
	runtime.KeepAlive(cpConfigFileAllocMap)
	__v := (int32)(__ret)
	return __v
}

// XENGINE_MgmtCreateContextEx function as declared in mgmt/xengine_mgmt_op.h:275
func XENGINE_MgmtCreateContextEx(pConfigFile []byte, pPassFile []byte, pDevPin []byte, pUserName []byte) int32 {
	cpConfigFile, cpConfigFileAllocMap := copyPCharBytes((*sliceHeader)(unsafe.Pointer(&pConfigFile)))
	cpPassFile, cpPassFileAllocMap := copyPCharBytes((*sliceHeader)(unsafe.Pointer(&pPassFile)))
	cpDevPin, cpDevPinAllocMap := copyPCharBytes((*sliceHeader)(unsafe.Pointer(&pDevPin)))
	cpUserName, cpUserNameAllocMap := copyPCharBytes((*sliceHeader)(unsafe.Pointer(&pUserName)))
	__ret := C.XENGINE_MgmtCreateContextEx(cpConfigFile, cpPassFile, cpDevPin, cpUserName)
	runtime.KeepAlive(cpUserNameAllocMap)
	runtime.KeepAlive(cpDevPinAllocMap)
	runtime.KeepAlive(cpPassFileAllocMap)
	runtime.KeepAlive(cpConfigFileAllocMap)
	__v := (int32)(__ret)
	return __v
}

// XENGINE_MgmtRefreshContext function as declared in mgmt/xengine_mgmt_op.h:282
func XENGINE_MgmtRefreshContext() int32 {
	__ret := C.XENGINE_MgmtRefreshContext()
	__v := (int32)(__ret)
	return __v
}

// XENGINE_MgmtDestroyContext function as declared in mgmt/xengine_mgmt_op.h:284
func XENGINE_MgmtDestroyContext() int32 {
	__ret := C.XENGINE_MgmtDestroyContext()
	__v := (int32)(__ret)
	return __v
}

// XENGINE_MgmtConnect function as declared in mgmt/xengine_mgmt_op.h:296
func XENGINE_MgmtConnect(pServerIp []byte, wPort uint16, phEngineMgmt []unsafe.Pointer) int32 {
	cpServerIp, cpServerIpAllocMap := copyPCharBytes((*sliceHeader)(unsafe.Pointer(&pServerIp)))
	cwPort, cwPortAllocMap := (C.ushort)(wPort), cgoAllocsUnknown
	cphEngineMgmt, cphEngineMgmtAllocMap := copyPPointerBytes((*sliceHeader)(unsafe.Pointer(&phEngineMgmt)))
	__ret := C.XENGINE_MgmtConnect(cpServerIp, cwPort, cphEngineMgmt)
	runtime.KeepAlive(cphEngineMgmtAllocMap)
	runtime.KeepAlive(cwPortAllocMap)
	runtime.KeepAlive(cpServerIpAllocMap)
	__v := (int32)(__ret)
	return __v
}

// XENGINE_MgmtConnectEx function as declared in mgmt/xengine_mgmt_op.h:302
func XENGINE_MgmtConnectEx(pServerIp []byte, wPort uint32, pUser []byte, pPass []byte, pParam []byte, wParamLen uint32, phEngineMgmt []unsafe.Pointer) int32 {
	cpServerIp, cpServerIpAllocMap := copyPCharBytes((*sliceHeader)(unsafe.Pointer(&pServerIp)))
	cwPort, cwPortAllocMap := (C.uint)(wPort), cgoAllocsUnknown
	cpUser, cpUserAllocMap := copyPCharBytes((*sliceHeader)(unsafe.Pointer(&pUser)))
	cpPass, cpPassAllocMap := copyPCharBytes((*sliceHeader)(unsafe.Pointer(&pPass)))
	cpParam, cpParamAllocMap := copyPUcharBytes((*sliceHeader)(unsafe.Pointer(&pParam)))
	cwParamLen, cwParamLenAllocMap := (C.uint)(wParamLen), cgoAllocsUnknown
	cphEngineMgmt, cphEngineMgmtAllocMap := copyPPointerBytes((*sliceHeader)(unsafe.Pointer(&phEngineMgmt)))
	__ret := C.XENGINE_MgmtConnectEx(cpServerIp, cwPort, cpUser, cpPass, cpParam, cwParamLen, cphEngineMgmt)
	runtime.KeepAlive(cphEngineMgmtAllocMap)
	runtime.KeepAlive(cwParamLenAllocMap)
	runtime.KeepAlive(cpParamAllocMap)
	runtime.KeepAlive(cpPassAllocMap)
	runtime.KeepAlive(cpUserAllocMap)
	runtime.KeepAlive(cwPortAllocMap)
	runtime.KeepAlive(cpServerIpAllocMap)
	__v := (int32)(__ret)
	return __v
}

// XENGINE_MgmtConnectEx2 function as declared in mgmt/xengine_mgmt_op.h:312
func XENGINE_MgmtConnectEx2(pServerIp []byte, wPort uint16, nAlg uint32, userId []byte, devId []byte, prvKey unsafe.Pointer, prvKeyLen int32, pubKey unsafe.Pointer, pubKeyLen int32, phEngineMgmt []unsafe.Pointer) int32 {
	cpServerIp, cpServerIpAllocMap := copyPCharBytes((*sliceHeader)(unsafe.Pointer(&pServerIp)))
	cwPort, cwPortAllocMap := (C.ushort)(wPort), cgoAllocsUnknown
	cnAlg, cnAlgAllocMap := (C.uint)(nAlg), cgoAllocsUnknown
	cuserId, cuserIdAllocMap := copyPCharBytes((*sliceHeader)(unsafe.Pointer(&userId)))
	cdevId, cdevIdAllocMap := copyPCharBytes((*sliceHeader)(unsafe.Pointer(&devId)))
	cprvKey, cprvKeyAllocMap := prvKey, cgoAllocsUnknown
	cprvKeyLen, cprvKeyLenAllocMap := (C.int)(prvKeyLen), cgoAllocsUnknown
	cpubKey, cpubKeyAllocMap := pubKey, cgoAllocsUnknown
	cpubKeyLen, cpubKeyLenAllocMap := (C.int)(pubKeyLen), cgoAllocsUnknown
	cphEngineMgmt, cphEngineMgmtAllocMap := copyPPointerBytes((*sliceHeader)(unsafe.Pointer(&phEngineMgmt)))
	__ret := C.XENGINE_MgmtConnectEx2(cpServerIp, cwPort, cnAlg, cuserId, cdevId, cprvKey, cprvKeyLen, cpubKey, cpubKeyLen, cphEngineMgmt)
	runtime.KeepAlive(cphEngineMgmtAllocMap)
	runtime.KeepAlive(cpubKeyLenAllocMap)
	runtime.KeepAlive(cpubKeyAllocMap)
	runtime.KeepAlive(cprvKeyLenAllocMap)
	runtime.KeepAlive(cprvKeyAllocMap)
	runtime.KeepAlive(cdevIdAllocMap)
	runtime.KeepAlive(cuserIdAllocMap)
	runtime.KeepAlive(cnAlgAllocMap)
	runtime.KeepAlive(cwPortAllocMap)
	runtime.KeepAlive(cpServerIpAllocMap)
	__v := (int32)(__ret)
	return __v
}

// XENGINE_MgmtDisconnect function as declared in mgmt/xengine_mgmt_op.h:334
func XENGINE_MgmtDisconnect(hEngineMgmt unsafe.Pointer) int32 {
	chEngineMgmt, chEngineMgmtAllocMap := hEngineMgmt, cgoAllocsUnknown
	__ret := C.XENGINE_MgmtDisconnect(chEngineMgmt)
	runtime.KeepAlive(chEngineMgmtAllocMap)
	__v := (int32)(__ret)
	return __v
}

// XENGINE_MgmtSetParam function as declared in mgmt/xengine_mgmt_op.h:350
func XENGINE_MgmtSetParam(hEngineMgmt unsafe.Pointer, nIndex int32, nParamType uint32, pParamData []byte, nParamLen int32) int32 {
	chEngineMgmt, chEngineMgmtAllocMap := hEngineMgmt, cgoAllocsUnknown
	cnIndex, cnIndexAllocMap := (C.int)(nIndex), cgoAllocsUnknown
	cnParamType, cnParamTypeAllocMap := (C.uint)(nParamType), cgoAllocsUnknown
	cpParamData, cpParamDataAllocMap := copyPUcharBytes((*sliceHeader)(unsafe.Pointer(&pParamData)))
	cnParamLen, cnParamLenAllocMap := (C.int)(nParamLen), cgoAllocsUnknown
	__ret := C.XENGINE_MgmtSetParam(chEngineMgmt, cnIndex, cnParamType, cpParamData, cnParamLen)
	runtime.KeepAlive(cnParamLenAllocMap)
	runtime.KeepAlive(cpParamDataAllocMap)
	runtime.KeepAlive(cnParamTypeAllocMap)
	runtime.KeepAlive(cnIndexAllocMap)
	runtime.KeepAlive(chEngineMgmtAllocMap)
	__v := (int32)(__ret)
	return __v
}

// XENGINE_MgmtSetId function as declared in mgmt/xengine_mgmt_op.h:358
func XENGINE_MgmtSetId(hEngineMgmt unsafe.Pointer, nIndex int32, nParamType uint32, pParamData []byte, nParamLen int32) int32 {
	chEngineMgmt, chEngineMgmtAllocMap := hEngineMgmt, cgoAllocsUnknown
	cnIndex, cnIndexAllocMap := (C.int)(nIndex), cgoAllocsUnknown
	cnParamType, cnParamTypeAllocMap := (C.uint)(nParamType), cgoAllocsUnknown
	cpParamData, cpParamDataAllocMap := copyPUcharBytes((*sliceHeader)(unsafe.Pointer(&pParamData)))
	cnParamLen, cnParamLenAllocMap := (C.int)(nParamLen), cgoAllocsUnknown
	__ret := C.XENGINE_MgmtSetId(chEngineMgmt, cnIndex, cnParamType, cpParamData, cnParamLen)
	runtime.KeepAlive(cnParamLenAllocMap)
	runtime.KeepAlive(cpParamDataAllocMap)
	runtime.KeepAlive(cnParamTypeAllocMap)
	runtime.KeepAlive(cnIndexAllocMap)
	runtime.KeepAlive(chEngineMgmtAllocMap)
	__v := (int32)(__ret)
	return __v
}

// XENGINE_MgmtSetPrvKey function as declared in mgmt/xengine_mgmt_op.h:385
func XENGINE_MgmtSetPrvKey(hEngineMgmt unsafe.Pointer, nKeyIndex int32, nShareIndex int32, eMode int32, pProtectKey []byte, nProtectKeyLen int32, nKeyType uint32, pKeyData []byte, nKeyLen int32, pPasswd []byte, nPassLen int32) int32 {
	chEngineMgmt, chEngineMgmtAllocMap := hEngineMgmt, cgoAllocsUnknown
	cnKeyIndex, cnKeyIndexAllocMap := (C.int)(nKeyIndex), cgoAllocsUnknown
	cnShareIndex, cnShareIndexAllocMap := (C.int)(nShareIndex), cgoAllocsUnknown
	ceMode, ceModeAllocMap := (C.MkeyProtectMode_e)(eMode), cgoAllocsUnknown
	cpProtectKey, cpProtectKeyAllocMap := copyPUcharBytes((*sliceHeader)(unsafe.Pointer(&pProtectKey)))
	cnProtectKeyLen, cnProtectKeyLenAllocMap := (C.int)(nProtectKeyLen), cgoAllocsUnknown
	cnKeyType, cnKeyTypeAllocMap := (C.uint)(nKeyType), cgoAllocsUnknown
	cpKeyData, cpKeyDataAllocMap := copyPUcharBytes((*sliceHeader)(unsafe.Pointer(&pKeyData)))
	cnKeyLen, cnKeyLenAllocMap := (C.int)(nKeyLen), cgoAllocsUnknown
	cpPasswd, cpPasswdAllocMap := copyPUcharBytes((*sliceHeader)(unsafe.Pointer(&pPasswd)))
	cnPassLen, cnPassLenAllocMap := (C.int)(nPassLen), cgoAllocsUnknown
	__ret := C.XENGINE_MgmtSetPrvKey(chEngineMgmt, cnKeyIndex, cnShareIndex, ceMode, cpProtectKey, cnProtectKeyLen, cnKeyType, cpKeyData, cnKeyLen, cpPasswd, cnPassLen)
	runtime.KeepAlive(cnPassLenAllocMap)
	runtime.KeepAlive(cpPasswdAllocMap)
	runtime.KeepAlive(cnKeyLenAllocMap)
	runtime.KeepAlive(cpKeyDataAllocMap)
	runtime.KeepAlive(cnKeyTypeAllocMap)
	runtime.KeepAlive(cnProtectKeyLenAllocMap)
	runtime.KeepAlive(cpProtectKeyAllocMap)
	runtime.KeepAlive(ceModeAllocMap)
	runtime.KeepAlive(cnShareIndexAllocMap)
	runtime.KeepAlive(cnKeyIndexAllocMap)
	runtime.KeepAlive(chEngineMgmtAllocMap)
	__v := (int32)(__ret)
	return __v
}

// XENGINE_MgmtStartServer function as declared in mgmt/xengine_mgmt_op.h:412
func XENGINE_MgmtStartServer(hEngineMgmt unsafe.Pointer, nIndex int32, pPasswd []byte, nPassLen int32) int32 {
	chEngineMgmt, chEngineMgmtAllocMap := hEngineMgmt, cgoAllocsUnknown
	cnIndex, cnIndexAllocMap := (C.int)(nIndex), cgoAllocsUnknown
	cpPasswd, cpPasswdAllocMap := copyPUcharBytes((*sliceHeader)(unsafe.Pointer(&pPasswd)))
	cnPassLen, cnPassLenAllocMap := (C.int)(nPassLen), cgoAllocsUnknown
	__ret := C.XENGINE_MgmtStartServer(chEngineMgmt, cnIndex, cpPasswd, cnPassLen)
	runtime.KeepAlive(cnPassLenAllocMap)
	runtime.KeepAlive(cpPasswdAllocMap)
	runtime.KeepAlive(cnIndexAllocMap)
	runtime.KeepAlive(chEngineMgmtAllocMap)
	__v := (int32)(__ret)
	return __v
}

// XENGINE_MgmtStopServer function as declared in mgmt/xengine_mgmt_op.h:432
func XENGINE_MgmtStopServer(hEngineMgmt unsafe.Pointer, nIndex int32, pPasswd []byte, nPassLen int32) int32 {
	chEngineMgmt, chEngineMgmtAllocMap := hEngineMgmt, cgoAllocsUnknown
	cnIndex, cnIndexAllocMap := (C.int)(nIndex), cgoAllocsUnknown
	cpPasswd, cpPasswdAllocMap := copyPUcharBytes((*sliceHeader)(unsafe.Pointer(&pPasswd)))
	cnPassLen, cnPassLenAllocMap := (C.int)(nPassLen), cgoAllocsUnknown
	__ret := C.XENGINE_MgmtStopServer(chEngineMgmt, cnIndex, cpPasswd, cnPassLen)
	runtime.KeepAlive(cnPassLenAllocMap)
	runtime.KeepAlive(cpPasswdAllocMap)
	runtime.KeepAlive(cnIndexAllocMap)
	runtime.KeepAlive(chEngineMgmtAllocMap)
	__v := (int32)(__ret)
	return __v
}

// XENGINE_MgmtLocalBackup function as declared in mgmt/xengine_mgmt_op.h:452
func XENGINE_MgmtLocalBackup(hEngineMgmt unsafe.Pointer, nIndex int32, pPasswd []byte, nPassLen int32) int32 {
	chEngineMgmt, chEngineMgmtAllocMap := hEngineMgmt, cgoAllocsUnknown
	cnIndex, cnIndexAllocMap := (C.int)(nIndex), cgoAllocsUnknown
	cpPasswd, cpPasswdAllocMap := copyPUcharBytes((*sliceHeader)(unsafe.Pointer(&pPasswd)))
	cnPassLen, cnPassLenAllocMap := (C.int)(nPassLen), cgoAllocsUnknown
	__ret := C.XENGINE_MgmtLocalBackup(chEngineMgmt, cnIndex, cpPasswd, cnPassLen)
	runtime.KeepAlive(cnPassLenAllocMap)
	runtime.KeepAlive(cpPasswdAllocMap)
	runtime.KeepAlive(cnIndexAllocMap)
	runtime.KeepAlive(chEngineMgmtAllocMap)
	__v := (int32)(__ret)
	return __v
}

// XENGINE_MgmtSetPasswd function as declared in mgmt/xengine_mgmt_op.h:474
func XENGINE_MgmtSetPasswd(hEngineMgmt unsafe.Pointer, nIndex int32, pOldPasswd []byte, nOldPassLen int32, pNewPasswd []byte, nNewPassLen int32) int32 {
	chEngineMgmt, chEngineMgmtAllocMap := hEngineMgmt, cgoAllocsUnknown
	cnIndex, cnIndexAllocMap := (C.int)(nIndex), cgoAllocsUnknown
	cpOldPasswd, cpOldPasswdAllocMap := copyPUcharBytes((*sliceHeader)(unsafe.Pointer(&pOldPasswd)))
	cnOldPassLen, cnOldPassLenAllocMap := (C.int)(nOldPassLen), cgoAllocsUnknown
	cpNewPasswd, cpNewPasswdAllocMap := copyPUcharBytes((*sliceHeader)(unsafe.Pointer(&pNewPasswd)))
	cnNewPassLen, cnNewPassLenAllocMap := (C.int)(nNewPassLen), cgoAllocsUnknown
	__ret := C.XENGINE_MgmtSetPasswd(chEngineMgmt, cnIndex, cpOldPasswd, cnOldPassLen, cpNewPasswd, cnNewPassLen)
	runtime.KeepAlive(cnNewPassLenAllocMap)
	runtime.KeepAlive(cpNewPasswdAllocMap)
	runtime.KeepAlive(cnOldPassLenAllocMap)
	runtime.KeepAlive(cpOldPasswdAllocMap)
	runtime.KeepAlive(cnIndexAllocMap)
	runtime.KeepAlive(chEngineMgmtAllocMap)
	__v := (int32)(__ret)
	return __v
}

// XENGINE_MgmtListKeyInfo function as declared in mgmt/xengine_mgmt_op.h:483
func XENGINE_MgmtListKeyInfo(hEngineMgmt unsafe.Pointer, keyInf []XEngineKeyInfo_t, keyNum []uint32) int32 {
	chEngineMgmt, chEngineMgmtAllocMap := hEngineMgmt, cgoAllocsUnknown
	ckeyInf, ckeyInfAllocMap := unpackArgSXEngineKeyInfo_t(keyInf)
	ckeyNum, ckeyNumAllocMap := copyPUintBytes((*sliceHeader)(unsafe.Pointer(&keyNum)))
	__ret := C.XENGINE_MgmtListKeyInfo(chEngineMgmt, ckeyInf, ckeyNum)
	runtime.KeepAlive(ckeyNumAllocMap)
	packSXEngineKeyInfo_t(keyInf, ckeyInf)
	runtime.KeepAlive(ckeyInfAllocMap)
	runtime.KeepAlive(chEngineMgmtAllocMap)
	__v := (int32)(__ret)
	return __v
}

// XENGINE_MgmtListKeyInfoEx function as declared in mgmt/xengine_mgmt_op.h:489
func XENGINE_MgmtListKeyInfoEx(hEngineMgmt unsafe.Pointer, keyInf []XEngineKeyInfoEx_t, keyNum []uint32) int32 {
	chEngineMgmt, chEngineMgmtAllocMap := hEngineMgmt, cgoAllocsUnknown
	ckeyInf, ckeyInfAllocMap := unpackArgSXEngineKeyInfoEx_t(keyInf)
	ckeyNum, ckeyNumAllocMap := copyPUintBytes((*sliceHeader)(unsafe.Pointer(&keyNum)))
	__ret := C.XENGINE_MgmtListKeyInfoEx(chEngineMgmt, ckeyInf, ckeyNum)
	runtime.KeepAlive(ckeyNumAllocMap)
	packSXEngineKeyInfoEx_t(keyInf, ckeyInf)
	runtime.KeepAlive(ckeyInfAllocMap)
	runtime.KeepAlive(chEngineMgmtAllocMap)
	__v := (int32)(__ret)
	return __v
}

// XENGINE_MgmtListKeyInfoEx2 function as declared in mgmt/xengine_mgmt_op.h:495
func XENGINE_MgmtListKeyInfoEx2(hEngineMgmt unsafe.Pointer, nStartPos uint32, nStopPos uint32, keyInf []XEngineKeyInfoEx_t, keyNum []uint32) int32 {
	chEngineMgmt, chEngineMgmtAllocMap := hEngineMgmt, cgoAllocsUnknown
	cnStartPos, cnStartPosAllocMap := (C.uint)(nStartPos), cgoAllocsUnknown
	cnStopPos, cnStopPosAllocMap := (C.uint)(nStopPos), cgoAllocsUnknown
	ckeyInf, ckeyInfAllocMap := unpackArgSXEngineKeyInfoEx_t(keyInf)
	ckeyNum, ckeyNumAllocMap := copyPUintBytes((*sliceHeader)(unsafe.Pointer(&keyNum)))
	__ret := C.XENGINE_MgmtListKeyInfoEx2(chEngineMgmt, cnStartPos, cnStopPos, ckeyInf, ckeyNum)
	runtime.KeepAlive(ckeyNumAllocMap)
	packSXEngineKeyInfoEx_t(keyInf, ckeyInf)
	runtime.KeepAlive(ckeyInfAllocMap)
	runtime.KeepAlive(cnStopPosAllocMap)
	runtime.KeepAlive(cnStartPosAllocMap)
	runtime.KeepAlive(chEngineMgmtAllocMap)
	__v := (int32)(__ret)
	return __v
}

// XENGINE_MgmtGetServerVer function as declared in mgmt/xengine_mgmt_op.h:503
func XENGINE_MgmtGetServerVer(hEngineMgmt unsafe.Pointer, pVerInfo []byte, pnVerLen []uint32) int32 {
	chEngineMgmt, chEngineMgmtAllocMap := hEngineMgmt, cgoAllocsUnknown
	cpVerInfo, cpVerInfoAllocMap := copyPUcharBytes((*sliceHeader)(unsafe.Pointer(&pVerInfo)))
	cpnVerLen, cpnVerLenAllocMap := copyPUintBytes((*sliceHeader)(unsafe.Pointer(&pnVerLen)))
	__ret := C.XENGINE_MgmtGetServerVer(chEngineMgmt, cpVerInfo, cpnVerLen)
	runtime.KeepAlive(cpnVerLenAllocMap)
	runtime.KeepAlive(cpVerInfoAllocMap)
	runtime.KeepAlive(chEngineMgmtAllocMap)
	__v := (int32)(__ret)
	return __v
}

// XENGINE_MgmtReadParam function as declared in mgmt/xengine_mgmt_op.h:521
func XENGINE_MgmtReadParam(hEngineMgmt unsafe.Pointer, nIndex int32, pnShare []uint32, pnType []uint32, pData []byte, pnDataLen []uint32) int32 {
	chEngineMgmt, chEngineMgmtAllocMap := hEngineMgmt, cgoAllocsUnknown
	cnIndex, cnIndexAllocMap := (C.int)(nIndex), cgoAllocsUnknown
	cpnShare, cpnShareAllocMap := copyPUintBytes((*sliceHeader)(unsafe.Pointer(&pnShare)))
	cpnType, cpnTypeAllocMap := copyPUintBytes((*sliceHeader)(unsafe.Pointer(&pnType)))
	cpData, cpDataAllocMap := copyPUcharBytes((*sliceHeader)(unsafe.Pointer(&pData)))
	cpnDataLen, cpnDataLenAllocMap := copyPUintBytes((*sliceHeader)(unsafe.Pointer(&pnDataLen)))
	__ret := C.XENGINE_MgmtReadParam(chEngineMgmt, cnIndex, cpnShare, cpnType, cpData, cpnDataLen)
	runtime.KeepAlive(cpnDataLenAllocMap)
	runtime.KeepAlive(cpDataAllocMap)
	runtime.KeepAlive(cpnTypeAllocMap)
	runtime.KeepAlive(cpnShareAllocMap)
	runtime.KeepAlive(cnIndexAllocMap)
	runtime.KeepAlive(chEngineMgmtAllocMap)
	__v := (int32)(__ret)
	return __v
}

// XENGINE_MgmtReadId function as declared in mgmt/xengine_mgmt_op.h:530
func XENGINE_MgmtReadId(hEngineMgmt unsafe.Pointer, nIndex int32, pData []byte, pnDataLen []uint32) int32 {
	chEngineMgmt, chEngineMgmtAllocMap := hEngineMgmt, cgoAllocsUnknown
	cnIndex, cnIndexAllocMap := (C.int)(nIndex), cgoAllocsUnknown
	cpData, cpDataAllocMap := copyPUcharBytes((*sliceHeader)(unsafe.Pointer(&pData)))
	cpnDataLen, cpnDataLenAllocMap := copyPUintBytes((*sliceHeader)(unsafe.Pointer(&pnDataLen)))
	__ret := C.XENGINE_MgmtReadId(chEngineMgmt, cnIndex, cpData, cpnDataLen)
	runtime.KeepAlive(cpnDataLenAllocMap)
	runtime.KeepAlive(cpDataAllocMap)
	runtime.KeepAlive(cnIndexAllocMap)
	runtime.KeepAlive(chEngineMgmtAllocMap)
	__v := (int32)(__ret)
	return __v
}

// XENGINE_MgmtReadPrvKey function as declared in mgmt/xengine_mgmt_op.h:537
func XENGINE_MgmtReadPrvKey(hEngineMgmt unsafe.Pointer, nIndex int32, pnShare []uint32, pnType []uint32, pPasswd []byte, nPassLen int32, eMode int32, pProtectKey []byte, nProtectKeyLen int32, pData []byte, pnDataLen []uint32) int32 {
	chEngineMgmt, chEngineMgmtAllocMap := hEngineMgmt, cgoAllocsUnknown
	cnIndex, cnIndexAllocMap := (C.int)(nIndex), cgoAllocsUnknown
	cpnShare, cpnShareAllocMap := copyPUintBytes((*sliceHeader)(unsafe.Pointer(&pnShare)))
	cpnType, cpnTypeAllocMap := copyPUintBytes((*sliceHeader)(unsafe.Pointer(&pnType)))
	cpPasswd, cpPasswdAllocMap := copyPUcharBytes((*sliceHeader)(unsafe.Pointer(&pPasswd)))
	cnPassLen, cnPassLenAllocMap := (C.int)(nPassLen), cgoAllocsUnknown
	ceMode, ceModeAllocMap := (C.MkeyProtectMode_e)(eMode), cgoAllocsUnknown
	cpProtectKey, cpProtectKeyAllocMap := copyPUcharBytes((*sliceHeader)(unsafe.Pointer(&pProtectKey)))
	cnProtectKeyLen, cnProtectKeyLenAllocMap := (C.int)(nProtectKeyLen), cgoAllocsUnknown
	cpData, cpDataAllocMap := copyPUcharBytes((*sliceHeader)(unsafe.Pointer(&pData)))
	cpnDataLen, cpnDataLenAllocMap := copyPUintBytes((*sliceHeader)(unsafe.Pointer(&pnDataLen)))
	__ret := C.XENGINE_MgmtReadPrvKey(chEngineMgmt, cnIndex, cpnShare, cpnType, cpPasswd, cnPassLen, ceMode, cpProtectKey, cnProtectKeyLen, cpData, cpnDataLen)
	runtime.KeepAlive(cpnDataLenAllocMap)
	runtime.KeepAlive(cpDataAllocMap)
	runtime.KeepAlive(cnProtectKeyLenAllocMap)
	runtime.KeepAlive(cpProtectKeyAllocMap)
	runtime.KeepAlive(ceModeAllocMap)
	runtime.KeepAlive(cnPassLenAllocMap)
	runtime.KeepAlive(cpPasswdAllocMap)
	runtime.KeepAlive(cpnTypeAllocMap)
	runtime.KeepAlive(cpnShareAllocMap)
	runtime.KeepAlive(cnIndexAllocMap)
	runtime.KeepAlive(chEngineMgmtAllocMap)
	__v := (int32)(__ret)
	return __v
}

// XENGINE_MgmtQueryStatus function as declared in mgmt/xengine_mgmt_op.h:562
func XENGINE_MgmtQueryStatus(hEngineMgmt unsafe.Pointer, nIndex int32, nItem uint32, pData []byte, pnDataLen []uint32) int32 {
	chEngineMgmt, chEngineMgmtAllocMap := hEngineMgmt, cgoAllocsUnknown
	cnIndex, cnIndexAllocMap := (C.int)(nIndex), cgoAllocsUnknown
	cnItem, cnItemAllocMap := (C.uint)(nItem), cgoAllocsUnknown
	cpData, cpDataAllocMap := copyPUcharBytes((*sliceHeader)(unsafe.Pointer(&pData)))
	cpnDataLen, cpnDataLenAllocMap := copyPUintBytes((*sliceHeader)(unsafe.Pointer(&pnDataLen)))
	__ret := C.XENGINE_MgmtQueryStatus(chEngineMgmt, cnIndex, cnItem, cpData, cpnDataLen)
	runtime.KeepAlive(cpnDataLenAllocMap)
	runtime.KeepAlive(cpDataAllocMap)
	runtime.KeepAlive(cnItemAllocMap)
	runtime.KeepAlive(cnIndexAllocMap)
	runtime.KeepAlive(chEngineMgmtAllocMap)
	__v := (int32)(__ret)
	return __v
}

// XENGINE_MgmtSetupIBCSystem function as declared in mgmt/xengine_mgmt_op.h:592
func XENGINE_MgmtSetupIBCSystem(hEngineMgmt unsafe.Pointer, nStartingIndex uint32, pDomainName []byte, nSerial uint32, nKga uint32, nSchema uint32, nCtype uint32, nPsize uint32, nRsize uint32, nShare uint32, nThreshold uint32, pPasswdArrary []XENGINE_MgmtPasswd_t) int32 {
	chEngineMgmt, chEngineMgmtAllocMap := hEngineMgmt, cgoAllocsUnknown
	cnStartingIndex, cnStartingIndexAllocMap := (C.uint)(nStartingIndex), cgoAllocsUnknown
	cpDomainName, cpDomainNameAllocMap := copyPCharBytes((*sliceHeader)(unsafe.Pointer(&pDomainName)))
	cnSerial, cnSerialAllocMap := (C.uint)(nSerial), cgoAllocsUnknown
	cnKga, cnKgaAllocMap := (C.uint)(nKga), cgoAllocsUnknown
	cnSchema, cnSchemaAllocMap := (C.uint)(nSchema), cgoAllocsUnknown
	cnCtype, cnCtypeAllocMap := (C.uint)(nCtype), cgoAllocsUnknown
	cnPsize, cnPsizeAllocMap := (C.uint)(nPsize), cgoAllocsUnknown
	cnRsize, cnRsizeAllocMap := (C.uint)(nRsize), cgoAllocsUnknown
	cnShare, cnShareAllocMap := (C.uint)(nShare), cgoAllocsUnknown
	cnThreshold, cnThresholdAllocMap := (C.uint)(nThreshold), cgoAllocsUnknown
	cpPasswdArrary, cpPasswdArraryAllocMap := unpackArgSXENGINE_MgmtPasswd_t(pPasswdArrary)
	__ret := C.XENGINE_MgmtSetupIBCSystem(chEngineMgmt, cnStartingIndex, cpDomainName, cnSerial, cnKga, cnSchema, cnCtype, cnPsize, cnRsize, cnShare, cnThreshold, cpPasswdArrary)
	packSXENGINE_MgmtPasswd_t(pPasswdArrary, cpPasswdArrary)
	runtime.KeepAlive(cpPasswdArraryAllocMap)
	runtime.KeepAlive(cnThresholdAllocMap)
	runtime.KeepAlive(cnShareAllocMap)
	runtime.KeepAlive(cnRsizeAllocMap)
	runtime.KeepAlive(cnPsizeAllocMap)
	runtime.KeepAlive(cnCtypeAllocMap)
	runtime.KeepAlive(cnSchemaAllocMap)
	runtime.KeepAlive(cnKgaAllocMap)
	runtime.KeepAlive(cnSerialAllocMap)
	runtime.KeepAlive(cpDomainNameAllocMap)
	runtime.KeepAlive(cnStartingIndexAllocMap)
	runtime.KeepAlive(chEngineMgmtAllocMap)
	__v := (int32)(__ret)
	return __v
}

// XENGINE_MgmtGenerateKey function as declared in mgmt/xengine_mgmt_op.h:624
func XENGINE_MgmtGenerateKey(hEngineMgmt unsafe.Pointer, nStartingIndex uint32, pId []byte, nKga uint32, nCtype uint32, nPsize uint32, nRsize uint32, nShare uint32, nThreshold uint32, pPasswdArrary []XENGINE_MgmtPasswd_t) int32 {
	chEngineMgmt, chEngineMgmtAllocMap := hEngineMgmt, cgoAllocsUnknown
	cnStartingIndex, cnStartingIndexAllocMap := (C.uint)(nStartingIndex), cgoAllocsUnknown
	cpId, cpIdAllocMap := copyPCharBytes((*sliceHeader)(unsafe.Pointer(&pId)))
	cnKga, cnKgaAllocMap := (C.uint)(nKga), cgoAllocsUnknown
	cnCtype, cnCtypeAllocMap := (C.uint)(nCtype), cgoAllocsUnknown
	cnPsize, cnPsizeAllocMap := (C.uint)(nPsize), cgoAllocsUnknown
	cnRsize, cnRsizeAllocMap := (C.uint)(nRsize), cgoAllocsUnknown
	cnShare, cnShareAllocMap := (C.uint)(nShare), cgoAllocsUnknown
	cnThreshold, cnThresholdAllocMap := (C.uint)(nThreshold), cgoAllocsUnknown
	cpPasswdArrary, cpPasswdArraryAllocMap := unpackArgSXENGINE_MgmtPasswd_t(pPasswdArrary)
	__ret := C.XENGINE_MgmtGenerateKey(chEngineMgmt, cnStartingIndex, cpId, cnKga, cnCtype, cnPsize, cnRsize, cnShare, cnThreshold, cpPasswdArrary)
	packSXENGINE_MgmtPasswd_t(pPasswdArrary, cpPasswdArrary)
	runtime.KeepAlive(cpPasswdArraryAllocMap)
	runtime.KeepAlive(cnThresholdAllocMap)
	runtime.KeepAlive(cnShareAllocMap)
	runtime.KeepAlive(cnRsizeAllocMap)
	runtime.KeepAlive(cnPsizeAllocMap)
	runtime.KeepAlive(cnCtypeAllocMap)
	runtime.KeepAlive(cnKgaAllocMap)
	runtime.KeepAlive(cpIdAllocMap)
	runtime.KeepAlive(cnStartingIndexAllocMap)
	runtime.KeepAlive(chEngineMgmtAllocMap)
	__v := (int32)(__ret)
	return __v
}

// XENGINE_MgmtGenerateOpeKey function as declared in mgmt/xengine_mgmt_op.h:637
func XENGINE_MgmtGenerateOpeKey(hEngineMgmt unsafe.Pointer, nStartingIndex uint32, pId []byte, nKga uint32, nAlg uint32, nBits uint32, nTau uint32, nNeg uint32, nScale uint32, nConf uint32, nShare uint32, nThreshold uint32, pPasswdArrary []XENGINE_MgmtPasswd_t) int32 {
	chEngineMgmt, chEngineMgmtAllocMap := hEngineMgmt, cgoAllocsUnknown
	cnStartingIndex, cnStartingIndexAllocMap := (C.uint)(nStartingIndex), cgoAllocsUnknown
	cpId, cpIdAllocMap := copyPCharBytes((*sliceHeader)(unsafe.Pointer(&pId)))
	cnKga, cnKgaAllocMap := (C.uint)(nKga), cgoAllocsUnknown
	cnAlg, cnAlgAllocMap := (C.uint)(nAlg), cgoAllocsUnknown
	cnBits, cnBitsAllocMap := (C.uint)(nBits), cgoAllocsUnknown
	cnTau, cnTauAllocMap := (C.uint)(nTau), cgoAllocsUnknown
	cnNeg, cnNegAllocMap := (C.uint)(nNeg), cgoAllocsUnknown
	cnScale, cnScaleAllocMap := (C.uint)(nScale), cgoAllocsUnknown
	cnConf, cnConfAllocMap := (C.uint)(nConf), cgoAllocsUnknown
	cnShare, cnShareAllocMap := (C.uint)(nShare), cgoAllocsUnknown
	cnThreshold, cnThresholdAllocMap := (C.uint)(nThreshold), cgoAllocsUnknown
	cpPasswdArrary, cpPasswdArraryAllocMap := unpackArgSXENGINE_MgmtPasswd_t(pPasswdArrary)
	__ret := C.XENGINE_MgmtGenerateOpeKey(chEngineMgmt, cnStartingIndex, cpId, cnKga, cnAlg, cnBits, cnTau, cnNeg, cnScale, cnConf, cnShare, cnThreshold, cpPasswdArrary)
	packSXENGINE_MgmtPasswd_t(pPasswdArrary, cpPasswdArrary)
	runtime.KeepAlive(cpPasswdArraryAllocMap)
	runtime.KeepAlive(cnThresholdAllocMap)
	runtime.KeepAlive(cnShareAllocMap)
	runtime.KeepAlive(cnConfAllocMap)
	runtime.KeepAlive(cnScaleAllocMap)
	runtime.KeepAlive(cnNegAllocMap)
	runtime.KeepAlive(cnTauAllocMap)
	runtime.KeepAlive(cnBitsAllocMap)
	runtime.KeepAlive(cnAlgAllocMap)
	runtime.KeepAlive(cnKgaAllocMap)
	runtime.KeepAlive(cpIdAllocMap)
	runtime.KeepAlive(cnStartingIndexAllocMap)
	runtime.KeepAlive(chEngineMgmtAllocMap)
	__v := (int32)(__ret)
	return __v
}

// XENGINE_MgmtBlackList function as declared in mgmt/xengine_mgmt_op.h:653
func XENGINE_MgmtBlackList(hEngineMgmt unsafe.Pointer, nIndex int32, nOperation uint32, pID []byte, nIDLen []uint32, nIDNum []uint32) int32 {
	chEngineMgmt, chEngineMgmtAllocMap := hEngineMgmt, cgoAllocsUnknown
	cnIndex, cnIndexAllocMap := (C.int)(nIndex), cgoAllocsUnknown
	cnOperation, cnOperationAllocMap := (C.uint)(nOperation), cgoAllocsUnknown
	cpID, cpIDAllocMap := copyPUcharBytes((*sliceHeader)(unsafe.Pointer(&pID)))
	cnIDLen, cnIDLenAllocMap := copyPUintBytes((*sliceHeader)(unsafe.Pointer(&nIDLen)))
	cnIDNum, cnIDNumAllocMap := copyPUintBytes((*sliceHeader)(unsafe.Pointer(&nIDNum)))
	__ret := C.XENGINE_MgmtBlackList(chEngineMgmt, cnIndex, cnOperation, cpID, cnIDLen, cnIDNum)
	runtime.KeepAlive(cnIDNumAllocMap)
	runtime.KeepAlive(cnIDLenAllocMap)
	runtime.KeepAlive(cpIDAllocMap)
	runtime.KeepAlive(cnOperationAllocMap)
	runtime.KeepAlive(cnIndexAllocMap)
	runtime.KeepAlive(chEngineMgmtAllocMap)
	__v := (int32)(__ret)
	return __v
}

// XENGINE_MgmtIPList function as declared in mgmt/xengine_mgmt_op.h:662
func XENGINE_MgmtIPList(hEngineMgmt unsafe.Pointer, nIndex int32, nOperation uint32, pIP []byte, nIPLen []uint32, nIPNum []uint32) int32 {
	chEngineMgmt, chEngineMgmtAllocMap := hEngineMgmt, cgoAllocsUnknown
	cnIndex, cnIndexAllocMap := (C.int)(nIndex), cgoAllocsUnknown
	cnOperation, cnOperationAllocMap := (C.uint)(nOperation), cgoAllocsUnknown
	cpIP, cpIPAllocMap := copyPUcharBytes((*sliceHeader)(unsafe.Pointer(&pIP)))
	cnIPLen, cnIPLenAllocMap := copyPUintBytes((*sliceHeader)(unsafe.Pointer(&nIPLen)))
	cnIPNum, cnIPNumAllocMap := copyPUintBytes((*sliceHeader)(unsafe.Pointer(&nIPNum)))
	__ret := C.XENGINE_MgmtIPList(chEngineMgmt, cnIndex, cnOperation, cpIP, cnIPLen, cnIPNum)
	runtime.KeepAlive(cnIPNumAllocMap)
	runtime.KeepAlive(cnIPLenAllocMap)
	runtime.KeepAlive(cpIPAllocMap)
	runtime.KeepAlive(cnOperationAllocMap)
	runtime.KeepAlive(cnIndexAllocMap)
	runtime.KeepAlive(chEngineMgmtAllocMap)
	__v := (int32)(__ret)
	return __v
}

// XENGINE_MgmtIPAddr function as declared in mgmt/xengine_mgmt_op.h:671
func XENGINE_MgmtIPAddr(hEngineMgmt unsafe.Pointer, nIndex int32, nOperation uint32, pIPAddr []byte, nIPAddrLen []uint32) int32 {
	chEngineMgmt, chEngineMgmtAllocMap := hEngineMgmt, cgoAllocsUnknown
	cnIndex, cnIndexAllocMap := (C.int)(nIndex), cgoAllocsUnknown
	cnOperation, cnOperationAllocMap := (C.uint)(nOperation), cgoAllocsUnknown
	cpIPAddr, cpIPAddrAllocMap := copyPUcharBytes((*sliceHeader)(unsafe.Pointer(&pIPAddr)))
	cnIPAddrLen, cnIPAddrLenAllocMap := copyPUintBytes((*sliceHeader)(unsafe.Pointer(&nIPAddrLen)))
	__ret := C.XENGINE_MgmtIPAddr(chEngineMgmt, cnIndex, cnOperation, cpIPAddr, cnIPAddrLen)
	runtime.KeepAlive(cnIPAddrLenAllocMap)
	runtime.KeepAlive(cpIPAddrAllocMap)
	runtime.KeepAlive(cnOperationAllocMap)
	runtime.KeepAlive(cnIndexAllocMap)
	runtime.KeepAlive(chEngineMgmtAllocMap)
	__v := (int32)(__ret)
	return __v
}

// XENGINE_MgmtTime function as declared in mgmt/xengine_mgmt_op.h:679
func XENGINE_MgmtTime(hEngineMgmt unsafe.Pointer, nIndex int32, nOperation uint32, pTime []byte, nTimeLen []uint32) int32 {
	chEngineMgmt, chEngineMgmtAllocMap := hEngineMgmt, cgoAllocsUnknown
	cnIndex, cnIndexAllocMap := (C.int)(nIndex), cgoAllocsUnknown
	cnOperation, cnOperationAllocMap := (C.uint)(nOperation), cgoAllocsUnknown
	cpTime, cpTimeAllocMap := copyPUcharBytes((*sliceHeader)(unsafe.Pointer(&pTime)))
	cnTimeLen, cnTimeLenAllocMap := copyPUintBytes((*sliceHeader)(unsafe.Pointer(&nTimeLen)))
	__ret := C.XENGINE_MgmtTime(chEngineMgmt, cnIndex, cnOperation, cpTime, cnTimeLen)
	runtime.KeepAlive(cnTimeLenAllocMap)
	runtime.KeepAlive(cpTimeAllocMap)
	runtime.KeepAlive(cnOperationAllocMap)
	runtime.KeepAlive(cnIndexAllocMap)
	runtime.KeepAlive(chEngineMgmtAllocMap)
	__v := (int32)(__ret)
	return __v
}

// XENGINE_MgmtSetCredential function as declared in mgmt/xengine_mgmt_op.h:687
func XENGINE_MgmtSetCredential(hEngineMgmt unsafe.Pointer, nIndex int32, nOp uint32, pPasswd []byte, nPassLen int32) int32 {
	chEngineMgmt, chEngineMgmtAllocMap := hEngineMgmt, cgoAllocsUnknown
	cnIndex, cnIndexAllocMap := (C.int)(nIndex), cgoAllocsUnknown
	cnOp, cnOpAllocMap := (C.uint)(nOp), cgoAllocsUnknown
	cpPasswd, cpPasswdAllocMap := copyPUcharBytes((*sliceHeader)(unsafe.Pointer(&pPasswd)))
	cnPassLen, cnPassLenAllocMap := (C.int)(nPassLen), cgoAllocsUnknown
	__ret := C.XENGINE_MgmtSetCredential(chEngineMgmt, cnIndex, cnOp, cpPasswd, cnPassLen)
	runtime.KeepAlive(cnPassLenAllocMap)
	runtime.KeepAlive(cpPasswdAllocMap)
	runtime.KeepAlive(cnOpAllocMap)
	runtime.KeepAlive(cnIndexAllocMap)
	runtime.KeepAlive(chEngineMgmtAllocMap)
	__v := (int32)(__ret)
	return __v
}

// XENGINE_MgmtSetLicense function as declared in mgmt/xengine_mgmt_op.h:695
func XENGINE_MgmtSetLicense(hEngineMgmt unsafe.Pointer, nIndex int32, nOp uint32, pLicense []byte, nLicenseLen []uint32, nLicenseTNum []uint32, nLicenseCNum []uint32) int32 {
	chEngineMgmt, chEngineMgmtAllocMap := hEngineMgmt, cgoAllocsUnknown
	cnIndex, cnIndexAllocMap := (C.int)(nIndex), cgoAllocsUnknown
	cnOp, cnOpAllocMap := (C.uint)(nOp), cgoAllocsUnknown
	cpLicense, cpLicenseAllocMap := copyPUcharBytes((*sliceHeader)(unsafe.Pointer(&pLicense)))
	cnLicenseLen, cnLicenseLenAllocMap := copyPUintBytes((*sliceHeader)(unsafe.Pointer(&nLicenseLen)))
	cnLicenseTNum, cnLicenseTNumAllocMap := copyPUintBytes((*sliceHeader)(unsafe.Pointer(&nLicenseTNum)))
	cnLicenseCNum, cnLicenseCNumAllocMap := copyPUintBytes((*sliceHeader)(unsafe.Pointer(&nLicenseCNum)))
	__ret := C.XENGINE_MgmtSetLicense(chEngineMgmt, cnIndex, cnOp, cpLicense, cnLicenseLen, cnLicenseTNum, cnLicenseCNum)
	runtime.KeepAlive(cnLicenseCNumAllocMap)
	runtime.KeepAlive(cnLicenseTNumAllocMap)
	runtime.KeepAlive(cnLicenseLenAllocMap)
	runtime.KeepAlive(cpLicenseAllocMap)
	runtime.KeepAlive(cnOpAllocMap)
	runtime.KeepAlive(cnIndexAllocMap)
	runtime.KeepAlive(chEngineMgmtAllocMap)
	__v := (int32)(__ret)
	return __v
}

// XENGINE_SetupIBCSystem_Encap function as declared in mgmt/xengine_mgmt_op.h:723
func XENGINE_SetupIBCSystem_Encap(pDomainName []byte, nSerial uint32, nKga uint32, nSchema uint32, nCtype uint32, nPsize uint32, nRsize uint32, nShare uint32, nThreshold uint32, ipAddress []byte, nPort uint16, nStartingIndex uint32, pPassword []byte) int32 {
	cpDomainName, cpDomainNameAllocMap := copyPCharBytes((*sliceHeader)(unsafe.Pointer(&pDomainName)))
	cnSerial, cnSerialAllocMap := (C.uint)(nSerial), cgoAllocsUnknown
	cnKga, cnKgaAllocMap := (C.uint)(nKga), cgoAllocsUnknown
	cnSchema, cnSchemaAllocMap := (C.uint)(nSchema), cgoAllocsUnknown
	cnCtype, cnCtypeAllocMap := (C.uint)(nCtype), cgoAllocsUnknown
	cnPsize, cnPsizeAllocMap := (C.uint)(nPsize), cgoAllocsUnknown
	cnRsize, cnRsizeAllocMap := (C.uint)(nRsize), cgoAllocsUnknown
	cnShare, cnShareAllocMap := (C.uint)(nShare), cgoAllocsUnknown
	cnThreshold, cnThresholdAllocMap := (C.uint)(nThreshold), cgoAllocsUnknown
	cipAddress, cipAddressAllocMap := copyPCharBytes((*sliceHeader)(unsafe.Pointer(&ipAddress)))
	cnPort, cnPortAllocMap := (C.ushort)(nPort), cgoAllocsUnknown
	cnStartingIndex, cnStartingIndexAllocMap := (C.uint)(nStartingIndex), cgoAllocsUnknown
	cpPassword, cpPasswordAllocMap := copyPCharBytes((*sliceHeader)(unsafe.Pointer(&pPassword)))
	__ret := C.XENGINE_SetupIBCSystem_Encap(cpDomainName, cnSerial, cnKga, cnSchema, cnCtype, cnPsize, cnRsize, cnShare, cnThreshold, cipAddress, cnPort, cnStartingIndex, cpPassword)
	runtime.KeepAlive(cpPasswordAllocMap)
	runtime.KeepAlive(cnStartingIndexAllocMap)
	runtime.KeepAlive(cnPortAllocMap)
	runtime.KeepAlive(cipAddressAllocMap)
	runtime.KeepAlive(cnThresholdAllocMap)
	runtime.KeepAlive(cnShareAllocMap)
	runtime.KeepAlive(cnRsizeAllocMap)
	runtime.KeepAlive(cnPsizeAllocMap)
	runtime.KeepAlive(cnCtypeAllocMap)
	runtime.KeepAlive(cnSchemaAllocMap)
	runtime.KeepAlive(cnKgaAllocMap)
	runtime.KeepAlive(cnSerialAllocMap)
	runtime.KeepAlive(cpDomainNameAllocMap)
	__v := (int32)(__ret)
	return __v
}

// XENGINE_SetupIBCSystem_Encap_Ex function as declared in mgmt/xengine_mgmt_op.h:739
func XENGINE_SetupIBCSystem_Encap_Ex(pDomainName []byte, nSerial uint32, nKga uint32, nSchema uint32, nCtype uint32, nPsize uint32, nRsize uint32, nShare uint32, nThreshold uint32, nSetSize uint32, ipAddress []byte, nPort uint16, nStartingIndex uint32, pPassword []byte) int32 {
	cpDomainName, cpDomainNameAllocMap := copyPCharBytes((*sliceHeader)(unsafe.Pointer(&pDomainName)))
	cnSerial, cnSerialAllocMap := (C.uint)(nSerial), cgoAllocsUnknown
	cnKga, cnKgaAllocMap := (C.uint)(nKga), cgoAllocsUnknown
	cnSchema, cnSchemaAllocMap := (C.uint)(nSchema), cgoAllocsUnknown
	cnCtype, cnCtypeAllocMap := (C.uint)(nCtype), cgoAllocsUnknown
	cnPsize, cnPsizeAllocMap := (C.uint)(nPsize), cgoAllocsUnknown
	cnRsize, cnRsizeAllocMap := (C.uint)(nRsize), cgoAllocsUnknown
	cnShare, cnShareAllocMap := (C.uint)(nShare), cgoAllocsUnknown
	cnThreshold, cnThresholdAllocMap := (C.uint)(nThreshold), cgoAllocsUnknown
	cnSetSize, cnSetSizeAllocMap := (C.uint)(nSetSize), cgoAllocsUnknown
	cipAddress, cipAddressAllocMap := copyPCharBytes((*sliceHeader)(unsafe.Pointer(&ipAddress)))
	cnPort, cnPortAllocMap := (C.ushort)(nPort), cgoAllocsUnknown
	cnStartingIndex, cnStartingIndexAllocMap := (C.uint)(nStartingIndex), cgoAllocsUnknown
	cpPassword, cpPasswordAllocMap := copyPCharBytes((*sliceHeader)(unsafe.Pointer(&pPassword)))
	__ret := C.XENGINE_SetupIBCSystem_Encap_Ex(cpDomainName, cnSerial, cnKga, cnSchema, cnCtype, cnPsize, cnRsize, cnShare, cnThreshold, cnSetSize, cipAddress, cnPort, cnStartingIndex, cpPassword)
	runtime.KeepAlive(cpPasswordAllocMap)
	runtime.KeepAlive(cnStartingIndexAllocMap)
	runtime.KeepAlive(cnPortAllocMap)
	runtime.KeepAlive(cipAddressAllocMap)
	runtime.KeepAlive(cnSetSizeAllocMap)
	runtime.KeepAlive(cnThresholdAllocMap)
	runtime.KeepAlive(cnShareAllocMap)
	runtime.KeepAlive(cnRsizeAllocMap)
	runtime.KeepAlive(cnPsizeAllocMap)
	runtime.KeepAlive(cnCtypeAllocMap)
	runtime.KeepAlive(cnSchemaAllocMap)
	runtime.KeepAlive(cnKgaAllocMap)
	runtime.KeepAlive(cnSerialAllocMap)
	runtime.KeepAlive(cpDomainNameAllocMap)
	__v := (int32)(__ret)
	return __v
}

// XENGINE_GenerateKey_Encap function as declared in mgmt/xengine_mgmt_op.h:756
func XENGINE_GenerateKey_Encap(ipAddress []byte, nPort uint16, nStartingIndex uint32, pId []byte, nKga uint32, nCtype uint32, nPsize uint32, nRsize uint32, nShare uint32, nThreshold uint32, pPassword []byte) int32 {
	cipAddress, cipAddressAllocMap := copyPCharBytes((*sliceHeader)(unsafe.Pointer(&ipAddress)))
	cnPort, cnPortAllocMap := (C.ushort)(nPort), cgoAllocsUnknown
	cnStartingIndex, cnStartingIndexAllocMap := (C.uint)(nStartingIndex), cgoAllocsUnknown
	cpId, cpIdAllocMap := copyPCharBytes((*sliceHeader)(unsafe.Pointer(&pId)))
	cnKga, cnKgaAllocMap := (C.uint)(nKga), cgoAllocsUnknown
	cnCtype, cnCtypeAllocMap := (C.uint)(nCtype), cgoAllocsUnknown
	cnPsize, cnPsizeAllocMap := (C.uint)(nPsize), cgoAllocsUnknown
	cnRsize, cnRsizeAllocMap := (C.uint)(nRsize), cgoAllocsUnknown
	cnShare, cnShareAllocMap := (C.uint)(nShare), cgoAllocsUnknown
	cnThreshold, cnThresholdAllocMap := (C.uint)(nThreshold), cgoAllocsUnknown
	cpPassword, cpPasswordAllocMap := copyPCharBytes((*sliceHeader)(unsafe.Pointer(&pPassword)))
	__ret := C.XENGINE_GenerateKey_Encap(cipAddress, cnPort, cnStartingIndex, cpId, cnKga, cnCtype, cnPsize, cnRsize, cnShare, cnThreshold, cpPassword)
	runtime.KeepAlive(cpPasswordAllocMap)
	runtime.KeepAlive(cnThresholdAllocMap)
	runtime.KeepAlive(cnShareAllocMap)
	runtime.KeepAlive(cnRsizeAllocMap)
	runtime.KeepAlive(cnPsizeAllocMap)
	runtime.KeepAlive(cnCtypeAllocMap)
	runtime.KeepAlive(cnKgaAllocMap)
	runtime.KeepAlive(cpIdAllocMap)
	runtime.KeepAlive(cnStartingIndexAllocMap)
	runtime.KeepAlive(cnPortAllocMap)
	runtime.KeepAlive(cipAddressAllocMap)
	__v := (int32)(__ret)
	return __v
}

// XENGINE_GenerateOpeKey_Encap function as declared in mgmt/xengine_mgmt_op.h:770
func XENGINE_GenerateOpeKey_Encap(ipAddress []byte, nPort uint16, nStartingIndex uint32, pId []byte, nKga uint32, nAlg uint32, nBits uint32, nTau uint32, nNeg uint32, nScale uint32, nConf uint32, nShare uint32, nThreshold uint32, pPassword []byte) int32 {
	cipAddress, cipAddressAllocMap := copyPCharBytes((*sliceHeader)(unsafe.Pointer(&ipAddress)))
	cnPort, cnPortAllocMap := (C.ushort)(nPort), cgoAllocsUnknown
	cnStartingIndex, cnStartingIndexAllocMap := (C.uint)(nStartingIndex), cgoAllocsUnknown
	cpId, cpIdAllocMap := copyPCharBytes((*sliceHeader)(unsafe.Pointer(&pId)))
	cnKga, cnKgaAllocMap := (C.uint)(nKga), cgoAllocsUnknown
	cnAlg, cnAlgAllocMap := (C.uint)(nAlg), cgoAllocsUnknown
	cnBits, cnBitsAllocMap := (C.uint)(nBits), cgoAllocsUnknown
	cnTau, cnTauAllocMap := (C.uint)(nTau), cgoAllocsUnknown
	cnNeg, cnNegAllocMap := (C.uint)(nNeg), cgoAllocsUnknown
	cnScale, cnScaleAllocMap := (C.uint)(nScale), cgoAllocsUnknown
	cnConf, cnConfAllocMap := (C.uint)(nConf), cgoAllocsUnknown
	cnShare, cnShareAllocMap := (C.uint)(nShare), cgoAllocsUnknown
	cnThreshold, cnThresholdAllocMap := (C.uint)(nThreshold), cgoAllocsUnknown
	cpPassword, cpPasswordAllocMap := copyPCharBytes((*sliceHeader)(unsafe.Pointer(&pPassword)))
	__ret := C.XENGINE_GenerateOpeKey_Encap(cipAddress, cnPort, cnStartingIndex, cpId, cnKga, cnAlg, cnBits, cnTau, cnNeg, cnScale, cnConf, cnShare, cnThreshold, cpPassword)
	runtime.KeepAlive(cpPasswordAllocMap)
	runtime.KeepAlive(cnThresholdAllocMap)
	runtime.KeepAlive(cnShareAllocMap)
	runtime.KeepAlive(cnConfAllocMap)
	runtime.KeepAlive(cnScaleAllocMap)
	runtime.KeepAlive(cnNegAllocMap)
	runtime.KeepAlive(cnTauAllocMap)
	runtime.KeepAlive(cnBitsAllocMap)
	runtime.KeepAlive(cnAlgAllocMap)
	runtime.KeepAlive(cnKgaAllocMap)
	runtime.KeepAlive(cpIdAllocMap)
	runtime.KeepAlive(cnStartingIndexAllocMap)
	runtime.KeepAlive(cnPortAllocMap)
	runtime.KeepAlive(cipAddressAllocMap)
	__v := (int32)(__ret)
	return __v
}

// XENGINE_RemoteBackup_Encap function as declared in mgmt/xengine_mgmt_op.h:803
func XENGINE_RemoteBackup_Encap(ipSrcAddress []byte, ipDstAddress []byte, nPort uint16, nSrcIndex byte, nDstIndex byte, eMode int32, pPassword []byte, nPassLen uint32) int32 {
	cipSrcAddress, cipSrcAddressAllocMap := copyPCharBytes((*sliceHeader)(unsafe.Pointer(&ipSrcAddress)))
	cipDstAddress, cipDstAddressAllocMap := copyPCharBytes((*sliceHeader)(unsafe.Pointer(&ipDstAddress)))
	cnPort, cnPortAllocMap := (C.ushort)(nPort), cgoAllocsUnknown
	cnSrcIndex, cnSrcIndexAllocMap := (C.uchar)(nSrcIndex), cgoAllocsUnknown
	cnDstIndex, cnDstIndexAllocMap := (C.uchar)(nDstIndex), cgoAllocsUnknown
	ceMode, ceModeAllocMap := (C.MkeyProtectMode_e)(eMode), cgoAllocsUnknown
	cpPassword, cpPasswordAllocMap := copyPUcharBytes((*sliceHeader)(unsafe.Pointer(&pPassword)))
	cnPassLen, cnPassLenAllocMap := (C.uint)(nPassLen), cgoAllocsUnknown
	__ret := C.XENGINE_RemoteBackup_Encap(cipSrcAddress, cipDstAddress, cnPort, cnSrcIndex, cnDstIndex, ceMode, cpPassword, cnPassLen)
	runtime.KeepAlive(cnPassLenAllocMap)
	runtime.KeepAlive(cpPasswordAllocMap)
	runtime.KeepAlive(ceModeAllocMap)
	runtime.KeepAlive(cnDstIndexAllocMap)
	runtime.KeepAlive(cnSrcIndexAllocMap)
	runtime.KeepAlive(cnPortAllocMap)
	runtime.KeepAlive(cipDstAddressAllocMap)
	runtime.KeepAlive(cipSrcAddressAllocMap)
	__v := (int32)(__ret)
	return __v
}

// XENGINE_LocalBackup_Encap function as declared in mgmt/xengine_mgmt_op.h:826
func XENGINE_LocalBackup_Encap(ipAddress []byte, nPort uint16, nIndex uint32, pPassword []byte, nPassLen uint32) int32 {
	cipAddress, cipAddressAllocMap := copyPCharBytes((*sliceHeader)(unsafe.Pointer(&ipAddress)))
	cnPort, cnPortAllocMap := (C.ushort)(nPort), cgoAllocsUnknown
	cnIndex, cnIndexAllocMap := (C.uint)(nIndex), cgoAllocsUnknown
	cpPassword, cpPasswordAllocMap := copyPUcharBytes((*sliceHeader)(unsafe.Pointer(&pPassword)))
	cnPassLen, cnPassLenAllocMap := (C.uint)(nPassLen), cgoAllocsUnknown
	__ret := C.XENGINE_LocalBackup_Encap(cipAddress, cnPort, cnIndex, cpPassword, cnPassLen)
	runtime.KeepAlive(cnPassLenAllocMap)
	runtime.KeepAlive(cpPasswordAllocMap)
	runtime.KeepAlive(cnIndexAllocMap)
	runtime.KeepAlive(cnPortAllocMap)
	runtime.KeepAlive(cipAddressAllocMap)
	__v := (int32)(__ret)
	return __v
}

// XENGINE_StartService_Encap function as declared in mgmt/xengine_mgmt_op.h:846
func XENGINE_StartService_Encap(ipAddress []byte, nPort uint16, nIndex uint32, pPassword []byte, nPassLen uint32) int32 {
	cipAddress, cipAddressAllocMap := copyPCharBytes((*sliceHeader)(unsafe.Pointer(&ipAddress)))
	cnPort, cnPortAllocMap := (C.ushort)(nPort), cgoAllocsUnknown
	cnIndex, cnIndexAllocMap := (C.uint)(nIndex), cgoAllocsUnknown
	cpPassword, cpPasswordAllocMap := copyPUcharBytes((*sliceHeader)(unsafe.Pointer(&pPassword)))
	cnPassLen, cnPassLenAllocMap := (C.uint)(nPassLen), cgoAllocsUnknown
	__ret := C.XENGINE_StartService_Encap(cipAddress, cnPort, cnIndex, cpPassword, cnPassLen)
	runtime.KeepAlive(cnPassLenAllocMap)
	runtime.KeepAlive(cpPasswordAllocMap)
	runtime.KeepAlive(cnIndexAllocMap)
	runtime.KeepAlive(cnPortAllocMap)
	runtime.KeepAlive(cipAddressAllocMap)
	__v := (int32)(__ret)
	return __v
}

// XENGINE_StopService_Encap function as declared in mgmt/xengine_mgmt_op.h:866
func XENGINE_StopService_Encap(ipAddress []byte, nPort uint16, nIndex uint32, pPassword []byte, nPassLen uint32) int32 {
	cipAddress, cipAddressAllocMap := copyPCharBytes((*sliceHeader)(unsafe.Pointer(&ipAddress)))
	cnPort, cnPortAllocMap := (C.ushort)(nPort), cgoAllocsUnknown
	cnIndex, cnIndexAllocMap := (C.uint)(nIndex), cgoAllocsUnknown
	cpPassword, cpPasswordAllocMap := copyPUcharBytes((*sliceHeader)(unsafe.Pointer(&pPassword)))
	cnPassLen, cnPassLenAllocMap := (C.uint)(nPassLen), cgoAllocsUnknown
	__ret := C.XENGINE_StopService_Encap(cipAddress, cnPort, cnIndex, cpPassword, cnPassLen)
	runtime.KeepAlive(cnPassLenAllocMap)
	runtime.KeepAlive(cpPasswordAllocMap)
	runtime.KeepAlive(cnIndexAllocMap)
	runtime.KeepAlive(cnPortAllocMap)
	runtime.KeepAlive(cipAddressAllocMap)
	__v := (int32)(__ret)
	return __v
}

// XENGINE_StartCipherCard_Encap function as declared in mgmt/xengine_mgmt_op.h:886
func XENGINE_StartCipherCard_Encap(ipAddress []byte, nPort uint16, pPasswd []byte, nPassLen int32) int32 {
	cipAddress, cipAddressAllocMap := copyPCharBytes((*sliceHeader)(unsafe.Pointer(&ipAddress)))
	cnPort, cnPortAllocMap := (C.ushort)(nPort), cgoAllocsUnknown
	cpPasswd, cpPasswdAllocMap := copyPUcharBytes((*sliceHeader)(unsafe.Pointer(&pPasswd)))
	cnPassLen, cnPassLenAllocMap := (C.int)(nPassLen), cgoAllocsUnknown
	__ret := C.XENGINE_StartCipherCard_Encap(cipAddress, cnPort, cpPasswd, cnPassLen)
	runtime.KeepAlive(cnPassLenAllocMap)
	runtime.KeepAlive(cpPasswdAllocMap)
	runtime.KeepAlive(cnPortAllocMap)
	runtime.KeepAlive(cipAddressAllocMap)
	__v := (int32)(__ret)
	return __v
}

// XENGINE_StopCipherCard_Encap function as declared in mgmt/xengine_mgmt_op.h:905
func XENGINE_StopCipherCard_Encap(ipAddress []byte, nPort uint16, pPasswd []byte, nPassLen int32) int32 {
	cipAddress, cipAddressAllocMap := copyPCharBytes((*sliceHeader)(unsafe.Pointer(&ipAddress)))
	cnPort, cnPortAllocMap := (C.ushort)(nPort), cgoAllocsUnknown
	cpPasswd, cpPasswdAllocMap := copyPUcharBytes((*sliceHeader)(unsafe.Pointer(&pPasswd)))
	cnPassLen, cnPassLenAllocMap := (C.int)(nPassLen), cgoAllocsUnknown
	__ret := C.XENGINE_StopCipherCard_Encap(cipAddress, cnPort, cpPasswd, cnPassLen)
	runtime.KeepAlive(cnPassLenAllocMap)
	runtime.KeepAlive(cpPasswdAllocMap)
	runtime.KeepAlive(cnPortAllocMap)
	runtime.KeepAlive(cipAddressAllocMap)
	__v := (int32)(__ret)
	return __v
}

// XENGINE_StatusCipherCard_Encap function as declared in mgmt/xengine_mgmt_op.h:924
func XENGINE_StatusCipherCard_Encap(ipAddress []byte, nPort uint16, pPasswd []byte, nPassLen int32, pNStatus []uint32) int32 {
	cipAddress, cipAddressAllocMap := copyPCharBytes((*sliceHeader)(unsafe.Pointer(&ipAddress)))
	cnPort, cnPortAllocMap := (C.ushort)(nPort), cgoAllocsUnknown
	cpPasswd, cpPasswdAllocMap := copyPUcharBytes((*sliceHeader)(unsafe.Pointer(&pPasswd)))
	cnPassLen, cnPassLenAllocMap := (C.int)(nPassLen), cgoAllocsUnknown
	cpNStatus, cpNStatusAllocMap := copyPUintBytes((*sliceHeader)(unsafe.Pointer(&pNStatus)))
	__ret := C.XENGINE_StatusCipherCard_Encap(cipAddress, cnPort, cpPasswd, cnPassLen, cpNStatus)
	runtime.KeepAlive(cpNStatusAllocMap)
	runtime.KeepAlive(cnPassLenAllocMap)
	runtime.KeepAlive(cpPasswdAllocMap)
	runtime.KeepAlive(cnPortAllocMap)
	runtime.KeepAlive(cipAddressAllocMap)
	__v := (int32)(__ret)
	return __v
}

// XENGINE_SyncFileOperation function as declared in mgmt/xengine_mgmt_op.h:940
func XENGINE_SyncFileOperation(hEngineMgmt unsafe.Pointer, nPoolId []byte, nAlg uint32, uiFileLength uint32, pucBuffer []byte, pucOutData []byte, puiOutDataLen []uint32) int32 {
	chEngineMgmt, chEngineMgmtAllocMap := hEngineMgmt, cgoAllocsUnknown
	cnPoolId, cnPoolIdAllocMap := copyPUcharBytes((*sliceHeader)(unsafe.Pointer(&nPoolId)))
	cnAlg, cnAlgAllocMap := (C.uint)(nAlg), cgoAllocsUnknown
	cuiFileLength, cuiFileLengthAllocMap := (C.uint)(uiFileLength), cgoAllocsUnknown
	cpucBuffer, cpucBufferAllocMap := copyPUcharBytes((*sliceHeader)(unsafe.Pointer(&pucBuffer)))
	cpucOutData, cpucOutDataAllocMap := copyPUcharBytes((*sliceHeader)(unsafe.Pointer(&pucOutData)))
	cpuiOutDataLen, cpuiOutDataLenAllocMap := copyPUintBytes((*sliceHeader)(unsafe.Pointer(&puiOutDataLen)))
	__ret := C.XENGINE_SyncFileOperation(chEngineMgmt, cnPoolId, cnAlg, cuiFileLength, cpucBuffer, cpucOutData, cpuiOutDataLen)
	runtime.KeepAlive(cpuiOutDataLenAllocMap)
	runtime.KeepAlive(cpucOutDataAllocMap)
	runtime.KeepAlive(cpucBufferAllocMap)
	runtime.KeepAlive(cuiFileLengthAllocMap)
	runtime.KeepAlive(cnAlgAllocMap)
	runtime.KeepAlive(cnPoolIdAllocMap)
	runtime.KeepAlive(chEngineMgmtAllocMap)
	__v := (int32)(__ret)
	return __v
}

// XENGINE_SyncGroupMgmt function as declared in mgmt/xengine_mgmt_op.h:955
func XENGINE_SyncGroupMgmt(hEngineMgmt unsafe.Pointer, nPoolId []byte, nPoolKey []byte, nOp uint32, nAlg uint32, uiDataLen uint32, pucData []byte, pucOutData []byte, puiOutDataLen []uint32) int32 {
	chEngineMgmt, chEngineMgmtAllocMap := hEngineMgmt, cgoAllocsUnknown
	cnPoolId, cnPoolIdAllocMap := copyPUcharBytes((*sliceHeader)(unsafe.Pointer(&nPoolId)))
	cnPoolKey, cnPoolKeyAllocMap := copyPUcharBytes((*sliceHeader)(unsafe.Pointer(&nPoolKey)))
	cnOp, cnOpAllocMap := (C.uint)(nOp), cgoAllocsUnknown
	cnAlg, cnAlgAllocMap := (C.uint)(nAlg), cgoAllocsUnknown
	cuiDataLen, cuiDataLenAllocMap := (C.uint)(uiDataLen), cgoAllocsUnknown
	cpucData, cpucDataAllocMap := copyPUcharBytes((*sliceHeader)(unsafe.Pointer(&pucData)))
	cpucOutData, cpucOutDataAllocMap := copyPUcharBytes((*sliceHeader)(unsafe.Pointer(&pucOutData)))
	cpuiOutDataLen, cpuiOutDataLenAllocMap := copyPUintBytes((*sliceHeader)(unsafe.Pointer(&puiOutDataLen)))
	__ret := C.XENGINE_SyncGroupMgmt(chEngineMgmt, cnPoolId, cnPoolKey, cnOp, cnAlg, cuiDataLen, cpucData, cpucOutData, cpuiOutDataLen)
	runtime.KeepAlive(cpuiOutDataLenAllocMap)
	runtime.KeepAlive(cpucOutDataAllocMap)
	runtime.KeepAlive(cpucDataAllocMap)
	runtime.KeepAlive(cuiDataLenAllocMap)
	runtime.KeepAlive(cnAlgAllocMap)
	runtime.KeepAlive(cnOpAllocMap)
	runtime.KeepAlive(cnPoolKeyAllocMap)
	runtime.KeepAlive(cnPoolIdAllocMap)
	runtime.KeepAlive(chEngineMgmtAllocMap)
	__v := (int32)(__ret)
	return __v
}

// XENGINE_FileOperation function as declared in mgmt/xengine_mgmt_op.h:967
func XENGINE_FileOperation(hEngineMgmt unsafe.Pointer, nOp byte, pucFileName []byte, uiNameLen uint32, uiFileSize uint32, uiOffset uint32, uiSegLen uint32, pucData []byte, puiDataLen []uint32) int32 {
	chEngineMgmt, chEngineMgmtAllocMap := hEngineMgmt, cgoAllocsUnknown
	cnOp, cnOpAllocMap := (C.uchar)(nOp), cgoAllocsUnknown
	cpucFileName, cpucFileNameAllocMap := copyPUcharBytes((*sliceHeader)(unsafe.Pointer(&pucFileName)))
	cuiNameLen, cuiNameLenAllocMap := (C.uint)(uiNameLen), cgoAllocsUnknown
	cuiFileSize, cuiFileSizeAllocMap := (C.uint)(uiFileSize), cgoAllocsUnknown
	cuiOffset, cuiOffsetAllocMap := (C.uint)(uiOffset), cgoAllocsUnknown
	cuiSegLen, cuiSegLenAllocMap := (C.uint)(uiSegLen), cgoAllocsUnknown
	cpucData, cpucDataAllocMap := copyPUcharBytes((*sliceHeader)(unsafe.Pointer(&pucData)))
	cpuiDataLen, cpuiDataLenAllocMap := copyPUintBytes((*sliceHeader)(unsafe.Pointer(&puiDataLen)))
	__ret := C.XENGINE_FileOperation(chEngineMgmt, cnOp, cpucFileName, cuiNameLen, cuiFileSize, cuiOffset, cuiSegLen, cpucData, cpuiDataLen)
	runtime.KeepAlive(cpuiDataLenAllocMap)
	runtime.KeepAlive(cpucDataAllocMap)
	runtime.KeepAlive(cuiSegLenAllocMap)
	runtime.KeepAlive(cuiOffsetAllocMap)
	runtime.KeepAlive(cuiFileSizeAllocMap)
	runtime.KeepAlive(cuiNameLenAllocMap)
	runtime.KeepAlive(cpucFileNameAllocMap)
	runtime.KeepAlive(cnOpAllocMap)
	runtime.KeepAlive(chEngineMgmtAllocMap)
	__v := (int32)(__ret)
	return __v
}

// XENGINE_CreateFile_Encap function as declared in mgmt/xengine_mgmt_op.h:979
func XENGINE_CreateFile_Encap(ipAddress []byte, nPort uint16, pucFileName []byte, uiNameLen uint32, uiFileSize uint32) int32 {
	cipAddress, cipAddressAllocMap := copyPCharBytes((*sliceHeader)(unsafe.Pointer(&ipAddress)))
	cnPort, cnPortAllocMap := (C.ushort)(nPort), cgoAllocsUnknown
	cpucFileName, cpucFileNameAllocMap := copyPUcharBytes((*sliceHeader)(unsafe.Pointer(&pucFileName)))
	cuiNameLen, cuiNameLenAllocMap := (C.uint)(uiNameLen), cgoAllocsUnknown
	cuiFileSize, cuiFileSizeAllocMap := (C.uint)(uiFileSize), cgoAllocsUnknown
	__ret := C.XENGINE_CreateFile_Encap(cipAddress, cnPort, cpucFileName, cuiNameLen, cuiFileSize)
	runtime.KeepAlive(cuiFileSizeAllocMap)
	runtime.KeepAlive(cuiNameLenAllocMap)
	runtime.KeepAlive(cpucFileNameAllocMap)
	runtime.KeepAlive(cnPortAllocMap)
	runtime.KeepAlive(cipAddressAllocMap)
	__v := (int32)(__ret)
	return __v
}

// XENGINE_ReadFile_Encap function as declared in mgmt/xengine_mgmt_op.h:987
func XENGINE_ReadFile_Encap(ipAddress []byte, nPort uint16, pucFileName []byte, uiNameLen uint32, uiOffset uint32, puiFileLength []uint32, pucBuffer []byte) int32 {
	cipAddress, cipAddressAllocMap := copyPCharBytes((*sliceHeader)(unsafe.Pointer(&ipAddress)))
	cnPort, cnPortAllocMap := (C.ushort)(nPort), cgoAllocsUnknown
	cpucFileName, cpucFileNameAllocMap := copyPUcharBytes((*sliceHeader)(unsafe.Pointer(&pucFileName)))
	cuiNameLen, cuiNameLenAllocMap := (C.uint)(uiNameLen), cgoAllocsUnknown
	cuiOffset, cuiOffsetAllocMap := (C.uint)(uiOffset), cgoAllocsUnknown
	cpuiFileLength, cpuiFileLengthAllocMap := copyPUintBytes((*sliceHeader)(unsafe.Pointer(&puiFileLength)))
	cpucBuffer, cpucBufferAllocMap := copyPUcharBytes((*sliceHeader)(unsafe.Pointer(&pucBuffer)))
	__ret := C.XENGINE_ReadFile_Encap(cipAddress, cnPort, cpucFileName, cuiNameLen, cuiOffset, cpuiFileLength, cpucBuffer)
	runtime.KeepAlive(cpucBufferAllocMap)
	runtime.KeepAlive(cpuiFileLengthAllocMap)
	runtime.KeepAlive(cuiOffsetAllocMap)
	runtime.KeepAlive(cuiNameLenAllocMap)
	runtime.KeepAlive(cpucFileNameAllocMap)
	runtime.KeepAlive(cnPortAllocMap)
	runtime.KeepAlive(cipAddressAllocMap)
	__v := (int32)(__ret)
	return __v
}

// XENGINE_WriteFile_Encap function as declared in mgmt/xengine_mgmt_op.h:997
func XENGINE_WriteFile_Encap(ipAddress []byte, nPort uint16, pucFileName []byte, uiNameLen uint32, uiOffset uint32, uiFileLength uint32, pucBuffer []byte) int32 {
	cipAddress, cipAddressAllocMap := copyPCharBytes((*sliceHeader)(unsafe.Pointer(&ipAddress)))
	cnPort, cnPortAllocMap := (C.ushort)(nPort), cgoAllocsUnknown
	cpucFileName, cpucFileNameAllocMap := copyPUcharBytes((*sliceHeader)(unsafe.Pointer(&pucFileName)))
	cuiNameLen, cuiNameLenAllocMap := (C.uint)(uiNameLen), cgoAllocsUnknown
	cuiOffset, cuiOffsetAllocMap := (C.uint)(uiOffset), cgoAllocsUnknown
	cuiFileLength, cuiFileLengthAllocMap := (C.uint)(uiFileLength), cgoAllocsUnknown
	cpucBuffer, cpucBufferAllocMap := copyPUcharBytes((*sliceHeader)(unsafe.Pointer(&pucBuffer)))
	__ret := C.XENGINE_WriteFile_Encap(cipAddress, cnPort, cpucFileName, cuiNameLen, cuiOffset, cuiFileLength, cpucBuffer)
	runtime.KeepAlive(cpucBufferAllocMap)
	runtime.KeepAlive(cuiFileLengthAllocMap)
	runtime.KeepAlive(cuiOffsetAllocMap)
	runtime.KeepAlive(cuiNameLenAllocMap)
	runtime.KeepAlive(cpucFileNameAllocMap)
	runtime.KeepAlive(cnPortAllocMap)
	runtime.KeepAlive(cipAddressAllocMap)
	__v := (int32)(__ret)
	return __v
}

// XENGINE_SyncFile_Encap function as declared in mgmt/xengine_mgmt_op.h:1007
func XENGINE_SyncFile_Encap(ipAddress []byte, nPort uint16, nPoolId []byte, nAlg uint32, uiFileLength uint32, pucBuffer []byte, pucOutData []byte, puiOutLen []uint32) int32 {
	cipAddress, cipAddressAllocMap := copyPCharBytes((*sliceHeader)(unsafe.Pointer(&ipAddress)))
	cnPort, cnPortAllocMap := (C.ushort)(nPort), cgoAllocsUnknown
	cnPoolId, cnPoolIdAllocMap := copyPUcharBytes((*sliceHeader)(unsafe.Pointer(&nPoolId)))
	cnAlg, cnAlgAllocMap := (C.uint)(nAlg), cgoAllocsUnknown
	cuiFileLength, cuiFileLengthAllocMap := (C.uint)(uiFileLength), cgoAllocsUnknown
	cpucBuffer, cpucBufferAllocMap := copyPUcharBytes((*sliceHeader)(unsafe.Pointer(&pucBuffer)))
	cpucOutData, cpucOutDataAllocMap := copyPUcharBytes((*sliceHeader)(unsafe.Pointer(&pucOutData)))
	cpuiOutLen, cpuiOutLenAllocMap := copyPUintBytes((*sliceHeader)(unsafe.Pointer(&puiOutLen)))
	__ret := C.XENGINE_SyncFile_Encap(cipAddress, cnPort, cnPoolId, cnAlg, cuiFileLength, cpucBuffer, cpucOutData, cpuiOutLen)
	runtime.KeepAlive(cpuiOutLenAllocMap)
	runtime.KeepAlive(cpucOutDataAllocMap)
	runtime.KeepAlive(cpucBufferAllocMap)
	runtime.KeepAlive(cuiFileLengthAllocMap)
	runtime.KeepAlive(cnAlgAllocMap)
	runtime.KeepAlive(cnPoolIdAllocMap)
	runtime.KeepAlive(cnPortAllocMap)
	runtime.KeepAlive(cipAddressAllocMap)
	__v := (int32)(__ret)
	return __v
}

// XENGINE_SyncGroupMgmt_Encap function as declared in mgmt/xengine_mgmt_op.h:1018
func XENGINE_SyncGroupMgmt_Encap(ipAddress []byte, nPort uint16, nPoolId []byte, nPoolKey []byte, nOp uint32, nAlg uint32, uiDataLen uint32, pucData []byte, pucOutData []byte, puiOutDataLen []uint32) int32 {
	cipAddress, cipAddressAllocMap := copyPCharBytes((*sliceHeader)(unsafe.Pointer(&ipAddress)))
	cnPort, cnPortAllocMap := (C.ushort)(nPort), cgoAllocsUnknown
	cnPoolId, cnPoolIdAllocMap := copyPUcharBytes((*sliceHeader)(unsafe.Pointer(&nPoolId)))
	cnPoolKey, cnPoolKeyAllocMap := copyPUcharBytes((*sliceHeader)(unsafe.Pointer(&nPoolKey)))
	cnOp, cnOpAllocMap := (C.uint)(nOp), cgoAllocsUnknown
	cnAlg, cnAlgAllocMap := (C.uint)(nAlg), cgoAllocsUnknown
	cuiDataLen, cuiDataLenAllocMap := (C.uint)(uiDataLen), cgoAllocsUnknown
	cpucData, cpucDataAllocMap := copyPUcharBytes((*sliceHeader)(unsafe.Pointer(&pucData)))
	cpucOutData, cpucOutDataAllocMap := copyPUcharBytes((*sliceHeader)(unsafe.Pointer(&pucOutData)))
	cpuiOutDataLen, cpuiOutDataLenAllocMap := copyPUintBytes((*sliceHeader)(unsafe.Pointer(&puiOutDataLen)))
	__ret := C.XENGINE_SyncGroupMgmt_Encap(cipAddress, cnPort, cnPoolId, cnPoolKey, cnOp, cnAlg, cuiDataLen, cpucData, cpucOutData, cpuiOutDataLen)
	runtime.KeepAlive(cpuiOutDataLenAllocMap)
	runtime.KeepAlive(cpucOutDataAllocMap)
	runtime.KeepAlive(cpucDataAllocMap)
	runtime.KeepAlive(cuiDataLenAllocMap)
	runtime.KeepAlive(cnAlgAllocMap)
	runtime.KeepAlive(cnOpAllocMap)
	runtime.KeepAlive(cnPoolKeyAllocMap)
	runtime.KeepAlive(cnPoolIdAllocMap)
	runtime.KeepAlive(cnPortAllocMap)
	runtime.KeepAlive(cipAddressAllocMap)
	__v := (int32)(__ret)
	return __v
}

// XENGINE_MgmtCACertSet function as declared in mgmt/xengine_mgmt_op.h:1049
func XENGINE_MgmtCACertSet(hEngineMgmt unsafe.Pointer, pucFileName []byte, uiNameLen uint32, pucData []byte, uiDataLen uint32) int32 {
	chEngineMgmt, chEngineMgmtAllocMap := hEngineMgmt, cgoAllocsUnknown
	cpucFileName, cpucFileNameAllocMap := copyPUcharBytes((*sliceHeader)(unsafe.Pointer(&pucFileName)))
	cuiNameLen, cuiNameLenAllocMap := (C.uint)(uiNameLen), cgoAllocsUnknown
	cpucData, cpucDataAllocMap := copyPUcharBytes((*sliceHeader)(unsafe.Pointer(&pucData)))
	cuiDataLen, cuiDataLenAllocMap := (C.uint)(uiDataLen), cgoAllocsUnknown
	__ret := C.XENGINE_MgmtCACertSet(chEngineMgmt, cpucFileName, cuiNameLen, cpucData, cuiDataLen)
	runtime.KeepAlive(cuiDataLenAllocMap)
	runtime.KeepAlive(cpucDataAllocMap)
	runtime.KeepAlive(cuiNameLenAllocMap)
	runtime.KeepAlive(cpucFileNameAllocMap)
	runtime.KeepAlive(chEngineMgmtAllocMap)
	__v := (int32)(__ret)
	return __v
}

// XENGINE_MgmtCACertGet function as declared in mgmt/xengine_mgmt_op.h:1057
func XENGINE_MgmtCACertGet(hEngineMgmt unsafe.Pointer, pucFileName []byte, uiNameLen uint32, pucData []byte, puiDataLen []uint32) int32 {
	chEngineMgmt, chEngineMgmtAllocMap := hEngineMgmt, cgoAllocsUnknown
	cpucFileName, cpucFileNameAllocMap := copyPUcharBytes((*sliceHeader)(unsafe.Pointer(&pucFileName)))
	cuiNameLen, cuiNameLenAllocMap := (C.uint)(uiNameLen), cgoAllocsUnknown
	cpucData, cpucDataAllocMap := copyPUcharBytes((*sliceHeader)(unsafe.Pointer(&pucData)))
	cpuiDataLen, cpuiDataLenAllocMap := copyPUintBytes((*sliceHeader)(unsafe.Pointer(&puiDataLen)))
	__ret := C.XENGINE_MgmtCACertGet(chEngineMgmt, cpucFileName, cuiNameLen, cpucData, cpuiDataLen)
	runtime.KeepAlive(cpuiDataLenAllocMap)
	runtime.KeepAlive(cpucDataAllocMap)
	runtime.KeepAlive(cuiNameLenAllocMap)
	runtime.KeepAlive(cpucFileNameAllocMap)
	runtime.KeepAlive(chEngineMgmtAllocMap)
	__v := (int32)(__ret)
	return __v
}

// XENGINE_MgmtCACertDel function as declared in mgmt/xengine_mgmt_op.h:1065
func XENGINE_MgmtCACertDel(hEngineMgmt unsafe.Pointer, pucFileName []byte, uiNameLen uint32) int32 {
	chEngineMgmt, chEngineMgmtAllocMap := hEngineMgmt, cgoAllocsUnknown
	cpucFileName, cpucFileNameAllocMap := copyPUcharBytes((*sliceHeader)(unsafe.Pointer(&pucFileName)))
	cuiNameLen, cuiNameLenAllocMap := (C.uint)(uiNameLen), cgoAllocsUnknown
	__ret := C.XENGINE_MgmtCACertDel(chEngineMgmt, cpucFileName, cuiNameLen)
	runtime.KeepAlive(cuiNameLenAllocMap)
	runtime.KeepAlive(cpucFileNameAllocMap)
	runtime.KeepAlive(chEngineMgmtAllocMap)
	__v := (int32)(__ret)
	return __v
}

// XENGINE_MgmtCACertEnum function as declared in mgmt/xengine_mgmt_op.h:1071
func XENGINE_MgmtCACertEnum(hEngineMgmt unsafe.Pointer, pucFileNames []byte, puiNameLen []uint32) int32 {
	chEngineMgmt, chEngineMgmtAllocMap := hEngineMgmt, cgoAllocsUnknown
	cpucFileNames, cpucFileNamesAllocMap := copyPUcharBytes((*sliceHeader)(unsafe.Pointer(&pucFileNames)))
	cpuiNameLen, cpuiNameLenAllocMap := copyPUintBytes((*sliceHeader)(unsafe.Pointer(&puiNameLen)))
	__ret := C.XENGINE_MgmtCACertEnum(chEngineMgmt, cpucFileNames, cpuiNameLen)
	runtime.KeepAlive(cpuiNameLenAllocMap)
	runtime.KeepAlive(cpucFileNamesAllocMap)
	runtime.KeepAlive(chEngineMgmtAllocMap)
	__v := (int32)(__ret)
	return __v
}

// XENGINE_CACertSet_Encap function as declared in mgmt/xengine_mgmt_op.h:1077
func XENGINE_CACertSet_Encap(ipAddress []byte, nPort uint16, pucFileName []byte, uiNameLen uint32, pucData []byte, uiDataLen uint32) int32 {
	cipAddress, cipAddressAllocMap := copyPCharBytes((*sliceHeader)(unsafe.Pointer(&ipAddress)))
	cnPort, cnPortAllocMap := (C.ushort)(nPort), cgoAllocsUnknown
	cpucFileName, cpucFileNameAllocMap := copyPUcharBytes((*sliceHeader)(unsafe.Pointer(&pucFileName)))
	cuiNameLen, cuiNameLenAllocMap := (C.uint)(uiNameLen), cgoAllocsUnknown
	cpucData, cpucDataAllocMap := copyPUcharBytes((*sliceHeader)(unsafe.Pointer(&pucData)))
	cuiDataLen, cuiDataLenAllocMap := (C.uint)(uiDataLen), cgoAllocsUnknown
	__ret := C.XENGINE_CACertSet_Encap(cipAddress, cnPort, cpucFileName, cuiNameLen, cpucData, cuiDataLen)
	runtime.KeepAlive(cuiDataLenAllocMap)
	runtime.KeepAlive(cpucDataAllocMap)
	runtime.KeepAlive(cuiNameLenAllocMap)
	runtime.KeepAlive(cpucFileNameAllocMap)
	runtime.KeepAlive(cnPortAllocMap)
	runtime.KeepAlive(cipAddressAllocMap)
	__v := (int32)(__ret)
	return __v
}

// XENGINE_CACertGet_Encap function as declared in mgmt/xengine_mgmt_op.h:1086
func XENGINE_CACertGet_Encap(ipAddress []byte, nPort uint16, pucFileName []byte, uiNameLen uint32, pucData []byte, puiDataLen []uint32) int32 {
	cipAddress, cipAddressAllocMap := copyPCharBytes((*sliceHeader)(unsafe.Pointer(&ipAddress)))
	cnPort, cnPortAllocMap := (C.ushort)(nPort), cgoAllocsUnknown
	cpucFileName, cpucFileNameAllocMap := copyPUcharBytes((*sliceHeader)(unsafe.Pointer(&pucFileName)))
	cuiNameLen, cuiNameLenAllocMap := (C.uint)(uiNameLen), cgoAllocsUnknown
	cpucData, cpucDataAllocMap := copyPUcharBytes((*sliceHeader)(unsafe.Pointer(&pucData)))
	cpuiDataLen, cpuiDataLenAllocMap := copyPUintBytes((*sliceHeader)(unsafe.Pointer(&puiDataLen)))
	__ret := C.XENGINE_CACertGet_Encap(cipAddress, cnPort, cpucFileName, cuiNameLen, cpucData, cpuiDataLen)
	runtime.KeepAlive(cpuiDataLenAllocMap)
	runtime.KeepAlive(cpucDataAllocMap)
	runtime.KeepAlive(cuiNameLenAllocMap)
	runtime.KeepAlive(cpucFileNameAllocMap)
	runtime.KeepAlive(cnPortAllocMap)
	runtime.KeepAlive(cipAddressAllocMap)
	__v := (int32)(__ret)
	return __v
}

// XENGINE_CACertDel_Encap function as declared in mgmt/xengine_mgmt_op.h:1095
func XENGINE_CACertDel_Encap(ipAddress []byte, nPort uint16, pucFileName []byte, uiNameLen uint32) int32 {
	cipAddress, cipAddressAllocMap := copyPCharBytes((*sliceHeader)(unsafe.Pointer(&ipAddress)))
	cnPort, cnPortAllocMap := (C.ushort)(nPort), cgoAllocsUnknown
	cpucFileName, cpucFileNameAllocMap := copyPUcharBytes((*sliceHeader)(unsafe.Pointer(&pucFileName)))
	cuiNameLen, cuiNameLenAllocMap := (C.uint)(uiNameLen), cgoAllocsUnknown
	__ret := C.XENGINE_CACertDel_Encap(cipAddress, cnPort, cpucFileName, cuiNameLen)
	runtime.KeepAlive(cuiNameLenAllocMap)
	runtime.KeepAlive(cpucFileNameAllocMap)
	runtime.KeepAlive(cnPortAllocMap)
	runtime.KeepAlive(cipAddressAllocMap)
	__v := (int32)(__ret)
	return __v
}

// XENGINE_CACertEnum_Encap function as declared in mgmt/xengine_mgmt_op.h:1102
func XENGINE_CACertEnum_Encap(ipAddress []byte, nPort uint16, pucFileNames []byte, puiNameLen []uint32) int32 {
	cipAddress, cipAddressAllocMap := copyPCharBytes((*sliceHeader)(unsafe.Pointer(&ipAddress)))
	cnPort, cnPortAllocMap := (C.ushort)(nPort), cgoAllocsUnknown
	cpucFileNames, cpucFileNamesAllocMap := copyPUcharBytes((*sliceHeader)(unsafe.Pointer(&pucFileNames)))
	cpuiNameLen, cpuiNameLenAllocMap := copyPUintBytes((*sliceHeader)(unsafe.Pointer(&puiNameLen)))
	__ret := C.XENGINE_CACertEnum_Encap(cipAddress, cnPort, cpucFileNames, cpuiNameLen)
	runtime.KeepAlive(cpuiNameLenAllocMap)
	runtime.KeepAlive(cpucFileNamesAllocMap)
	runtime.KeepAlive(cnPortAllocMap)
	runtime.KeepAlive(cipAddressAllocMap)
	__v := (int32)(__ret)
	return __v
}

// XENGINE_CACertStart_Encap function as declared in mgmt/xengine_mgmt_op.h:1109
func XENGINE_CACertStart_Encap(ipAddress []byte, nPort uint16, pucFileName []byte, uiNameLen uint32) int32 {
	cipAddress, cipAddressAllocMap := copyPCharBytes((*sliceHeader)(unsafe.Pointer(&ipAddress)))
	cnPort, cnPortAllocMap := (C.ushort)(nPort), cgoAllocsUnknown
	cpucFileName, cpucFileNameAllocMap := copyPUcharBytes((*sliceHeader)(unsafe.Pointer(&pucFileName)))
	cuiNameLen, cuiNameLenAllocMap := (C.uint)(uiNameLen), cgoAllocsUnknown
	__ret := C.XENGINE_CACertStart_Encap(cipAddress, cnPort, cpucFileName, cuiNameLen)
	runtime.KeepAlive(cuiNameLenAllocMap)
	runtime.KeepAlive(cpucFileNameAllocMap)
	runtime.KeepAlive(cnPortAllocMap)
	runtime.KeepAlive(cipAddressAllocMap)
	__v := (int32)(__ret)
	return __v
}

// XENGINE_CACertStop_Encap function as declared in mgmt/xengine_mgmt_op.h:1116
func XENGINE_CACertStop_Encap(ipAddress []byte, nPort uint16, pucFileName []byte, uiNameLen uint32) int32 {
	cipAddress, cipAddressAllocMap := copyPCharBytes((*sliceHeader)(unsafe.Pointer(&ipAddress)))
	cnPort, cnPortAllocMap := (C.ushort)(nPort), cgoAllocsUnknown
	cpucFileName, cpucFileNameAllocMap := copyPUcharBytes((*sliceHeader)(unsafe.Pointer(&pucFileName)))
	cuiNameLen, cuiNameLenAllocMap := (C.uint)(uiNameLen), cgoAllocsUnknown
	__ret := C.XENGINE_CACertStop_Encap(cipAddress, cnPort, cpucFileName, cuiNameLen)
	runtime.KeepAlive(cuiNameLenAllocMap)
	runtime.KeepAlive(cpucFileNameAllocMap)
	runtime.KeepAlive(cnPortAllocMap)
	runtime.KeepAlive(cipAddressAllocMap)
	__v := (int32)(__ret)
	return __v
}

// XENGINE_CACertStatus_Encap function as declared in mgmt/xengine_mgmt_op.h:1123
func XENGINE_CACertStatus_Encap(ipAddress []byte, nPort uint16, pucFileName []byte, uiNameLen uint32, puiStatus []uint32) int32 {
	cipAddress, cipAddressAllocMap := copyPCharBytes((*sliceHeader)(unsafe.Pointer(&ipAddress)))
	cnPort, cnPortAllocMap := (C.ushort)(nPort), cgoAllocsUnknown
	cpucFileName, cpucFileNameAllocMap := copyPUcharBytes((*sliceHeader)(unsafe.Pointer(&pucFileName)))
	cuiNameLen, cuiNameLenAllocMap := (C.uint)(uiNameLen), cgoAllocsUnknown
	cpuiStatus, cpuiStatusAllocMap := copyPUintBytes((*sliceHeader)(unsafe.Pointer(&puiStatus)))
	__ret := C.XENGINE_CACertStatus_Encap(cipAddress, cnPort, cpucFileName, cuiNameLen, cpuiStatus)
	runtime.KeepAlive(cpuiStatusAllocMap)
	runtime.KeepAlive(cuiNameLenAllocMap)
	runtime.KeepAlive(cpucFileNameAllocMap)
	runtime.KeepAlive(cnPortAllocMap)
	runtime.KeepAlive(cipAddressAllocMap)
	__v := (int32)(__ret)
	return __v
}

// XENGINE_MgmtCACrlSet function as declared in mgmt/xengine_mgmt_op.h:1131
func XENGINE_MgmtCACrlSet(hEngineMgmt unsafe.Pointer, pucFileName []byte, uiNameLen uint32, pucData []byte, uiDataLen uint32) int32 {
	chEngineMgmt, chEngineMgmtAllocMap := hEngineMgmt, cgoAllocsUnknown
	cpucFileName, cpucFileNameAllocMap := copyPUcharBytes((*sliceHeader)(unsafe.Pointer(&pucFileName)))
	cuiNameLen, cuiNameLenAllocMap := (C.uint)(uiNameLen), cgoAllocsUnknown
	cpucData, cpucDataAllocMap := copyPUcharBytes((*sliceHeader)(unsafe.Pointer(&pucData)))
	cuiDataLen, cuiDataLenAllocMap := (C.uint)(uiDataLen), cgoAllocsUnknown
	__ret := C.XENGINE_MgmtCACrlSet(chEngineMgmt, cpucFileName, cuiNameLen, cpucData, cuiDataLen)
	runtime.KeepAlive(cuiDataLenAllocMap)
	runtime.KeepAlive(cpucDataAllocMap)
	runtime.KeepAlive(cuiNameLenAllocMap)
	runtime.KeepAlive(cpucFileNameAllocMap)
	runtime.KeepAlive(chEngineMgmtAllocMap)
	__v := (int32)(__ret)
	return __v
}

// XENGINE_MgmtCACrlGet function as declared in mgmt/xengine_mgmt_op.h:1139
func XENGINE_MgmtCACrlGet(hEngineMgmt unsafe.Pointer, pucFileName []byte, uiNameLen uint32, pucData []byte, puiDataLen []uint32) int32 {
	chEngineMgmt, chEngineMgmtAllocMap := hEngineMgmt, cgoAllocsUnknown
	cpucFileName, cpucFileNameAllocMap := copyPUcharBytes((*sliceHeader)(unsafe.Pointer(&pucFileName)))
	cuiNameLen, cuiNameLenAllocMap := (C.uint)(uiNameLen), cgoAllocsUnknown
	cpucData, cpucDataAllocMap := copyPUcharBytes((*sliceHeader)(unsafe.Pointer(&pucData)))
	cpuiDataLen, cpuiDataLenAllocMap := copyPUintBytes((*sliceHeader)(unsafe.Pointer(&puiDataLen)))
	__ret := C.XENGINE_MgmtCACrlGet(chEngineMgmt, cpucFileName, cuiNameLen, cpucData, cpuiDataLen)
	runtime.KeepAlive(cpuiDataLenAllocMap)
	runtime.KeepAlive(cpucDataAllocMap)
	runtime.KeepAlive(cuiNameLenAllocMap)
	runtime.KeepAlive(cpucFileNameAllocMap)
	runtime.KeepAlive(chEngineMgmtAllocMap)
	__v := (int32)(__ret)
	return __v
}

// XENGINE_MgmtCACrlDel function as declared in mgmt/xengine_mgmt_op.h:1147
func XENGINE_MgmtCACrlDel(hEngineMgmt unsafe.Pointer, pucFileName []byte, uiNameLen uint32) int32 {
	chEngineMgmt, chEngineMgmtAllocMap := hEngineMgmt, cgoAllocsUnknown
	cpucFileName, cpucFileNameAllocMap := copyPUcharBytes((*sliceHeader)(unsafe.Pointer(&pucFileName)))
	cuiNameLen, cuiNameLenAllocMap := (C.uint)(uiNameLen), cgoAllocsUnknown
	__ret := C.XENGINE_MgmtCACrlDel(chEngineMgmt, cpucFileName, cuiNameLen)
	runtime.KeepAlive(cuiNameLenAllocMap)
	runtime.KeepAlive(cpucFileNameAllocMap)
	runtime.KeepAlive(chEngineMgmtAllocMap)
	__v := (int32)(__ret)
	return __v
}

// XENGINE_MgmtCACrlEnum function as declared in mgmt/xengine_mgmt_op.h:1153
func XENGINE_MgmtCACrlEnum(hEngineMgmt unsafe.Pointer, pucFileNames []byte, puiNameLen []uint32) int32 {
	chEngineMgmt, chEngineMgmtAllocMap := hEngineMgmt, cgoAllocsUnknown
	cpucFileNames, cpucFileNamesAllocMap := copyPUcharBytes((*sliceHeader)(unsafe.Pointer(&pucFileNames)))
	cpuiNameLen, cpuiNameLenAllocMap := copyPUintBytes((*sliceHeader)(unsafe.Pointer(&puiNameLen)))
	__ret := C.XENGINE_MgmtCACrlEnum(chEngineMgmt, cpucFileNames, cpuiNameLen)
	runtime.KeepAlive(cpuiNameLenAllocMap)
	runtime.KeepAlive(cpucFileNamesAllocMap)
	runtime.KeepAlive(chEngineMgmtAllocMap)
	__v := (int32)(__ret)
	return __v
}

// XENGINE_CACrlSet_Encap function as declared in mgmt/xengine_mgmt_op.h:1159
func XENGINE_CACrlSet_Encap(ipAddress []byte, nPort uint16, pucFileName []byte, uiNameLen uint32, pucData []byte, uiDataLen uint32) int32 {
	cipAddress, cipAddressAllocMap := copyPCharBytes((*sliceHeader)(unsafe.Pointer(&ipAddress)))
	cnPort, cnPortAllocMap := (C.ushort)(nPort), cgoAllocsUnknown
	cpucFileName, cpucFileNameAllocMap := copyPUcharBytes((*sliceHeader)(unsafe.Pointer(&pucFileName)))
	cuiNameLen, cuiNameLenAllocMap := (C.uint)(uiNameLen), cgoAllocsUnknown
	cpucData, cpucDataAllocMap := copyPUcharBytes((*sliceHeader)(unsafe.Pointer(&pucData)))
	cuiDataLen, cuiDataLenAllocMap := (C.uint)(uiDataLen), cgoAllocsUnknown
	__ret := C.XENGINE_CACrlSet_Encap(cipAddress, cnPort, cpucFileName, cuiNameLen, cpucData, cuiDataLen)
	runtime.KeepAlive(cuiDataLenAllocMap)
	runtime.KeepAlive(cpucDataAllocMap)
	runtime.KeepAlive(cuiNameLenAllocMap)
	runtime.KeepAlive(cpucFileNameAllocMap)
	runtime.KeepAlive(cnPortAllocMap)
	runtime.KeepAlive(cipAddressAllocMap)
	__v := (int32)(__ret)
	return __v
}

// XENGINE_CACrlGet_Encap function as declared in mgmt/xengine_mgmt_op.h:1168
func XENGINE_CACrlGet_Encap(ipAddress []byte, nPort uint16, pucFileName []byte, uiNameLen uint32, pucData []byte, puiDataLen []uint32) int32 {
	cipAddress, cipAddressAllocMap := copyPCharBytes((*sliceHeader)(unsafe.Pointer(&ipAddress)))
	cnPort, cnPortAllocMap := (C.ushort)(nPort), cgoAllocsUnknown
	cpucFileName, cpucFileNameAllocMap := copyPUcharBytes((*sliceHeader)(unsafe.Pointer(&pucFileName)))
	cuiNameLen, cuiNameLenAllocMap := (C.uint)(uiNameLen), cgoAllocsUnknown
	cpucData, cpucDataAllocMap := copyPUcharBytes((*sliceHeader)(unsafe.Pointer(&pucData)))
	cpuiDataLen, cpuiDataLenAllocMap := copyPUintBytes((*sliceHeader)(unsafe.Pointer(&puiDataLen)))
	__ret := C.XENGINE_CACrlGet_Encap(cipAddress, cnPort, cpucFileName, cuiNameLen, cpucData, cpuiDataLen)
	runtime.KeepAlive(cpuiDataLenAllocMap)
	runtime.KeepAlive(cpucDataAllocMap)
	runtime.KeepAlive(cuiNameLenAllocMap)
	runtime.KeepAlive(cpucFileNameAllocMap)
	runtime.KeepAlive(cnPortAllocMap)
	runtime.KeepAlive(cipAddressAllocMap)
	__v := (int32)(__ret)
	return __v
}

// XENGINE_CACrlDel_Encap function as declared in mgmt/xengine_mgmt_op.h:1177
func XENGINE_CACrlDel_Encap(ipAddress []byte, nPort uint16, pucFileName []byte, uiNameLen uint32) int32 {
	cipAddress, cipAddressAllocMap := copyPCharBytes((*sliceHeader)(unsafe.Pointer(&ipAddress)))
	cnPort, cnPortAllocMap := (C.ushort)(nPort), cgoAllocsUnknown
	cpucFileName, cpucFileNameAllocMap := copyPUcharBytes((*sliceHeader)(unsafe.Pointer(&pucFileName)))
	cuiNameLen, cuiNameLenAllocMap := (C.uint)(uiNameLen), cgoAllocsUnknown
	__ret := C.XENGINE_CACrlDel_Encap(cipAddress, cnPort, cpucFileName, cuiNameLen)
	runtime.KeepAlive(cuiNameLenAllocMap)
	runtime.KeepAlive(cpucFileNameAllocMap)
	runtime.KeepAlive(cnPortAllocMap)
	runtime.KeepAlive(cipAddressAllocMap)
	__v := (int32)(__ret)
	return __v
}

// XENGINE_CACrlEnum_Encap function as declared in mgmt/xengine_mgmt_op.h:1184
func XENGINE_CACrlEnum_Encap(ipAddress []byte, nPort uint16, pucFileNames []byte, puiNameLen []uint32) int32 {
	cipAddress, cipAddressAllocMap := copyPCharBytes((*sliceHeader)(unsafe.Pointer(&ipAddress)))
	cnPort, cnPortAllocMap := (C.ushort)(nPort), cgoAllocsUnknown
	cpucFileNames, cpucFileNamesAllocMap := copyPUcharBytes((*sliceHeader)(unsafe.Pointer(&pucFileNames)))
	cpuiNameLen, cpuiNameLenAllocMap := copyPUintBytes((*sliceHeader)(unsafe.Pointer(&puiNameLen)))
	__ret := C.XENGINE_CACrlEnum_Encap(cipAddress, cnPort, cpucFileNames, cpuiNameLen)
	runtime.KeepAlive(cpuiNameLenAllocMap)
	runtime.KeepAlive(cpucFileNamesAllocMap)
	runtime.KeepAlive(cnPortAllocMap)
	runtime.KeepAlive(cipAddressAllocMap)
	__v := (int32)(__ret)
	return __v
}

// XENGINE_CACrlStart_Encap function as declared in mgmt/xengine_mgmt_op.h:1191
func XENGINE_CACrlStart_Encap(ipAddress []byte, nPort uint16, pucFileName []byte, uiNameLen uint32) int32 {
	cipAddress, cipAddressAllocMap := copyPCharBytes((*sliceHeader)(unsafe.Pointer(&ipAddress)))
	cnPort, cnPortAllocMap := (C.ushort)(nPort), cgoAllocsUnknown
	cpucFileName, cpucFileNameAllocMap := copyPUcharBytes((*sliceHeader)(unsafe.Pointer(&pucFileName)))
	cuiNameLen, cuiNameLenAllocMap := (C.uint)(uiNameLen), cgoAllocsUnknown
	__ret := C.XENGINE_CACrlStart_Encap(cipAddress, cnPort, cpucFileName, cuiNameLen)
	runtime.KeepAlive(cuiNameLenAllocMap)
	runtime.KeepAlive(cpucFileNameAllocMap)
	runtime.KeepAlive(cnPortAllocMap)
	runtime.KeepAlive(cipAddressAllocMap)
	__v := (int32)(__ret)
	return __v
}

// XENGINE_CACrlStop_Encap function as declared in mgmt/xengine_mgmt_op.h:1198
func XENGINE_CACrlStop_Encap(ipAddress []byte, nPort uint16, pucFileName []byte, uiNameLen uint32) int32 {
	cipAddress, cipAddressAllocMap := copyPCharBytes((*sliceHeader)(unsafe.Pointer(&ipAddress)))
	cnPort, cnPortAllocMap := (C.ushort)(nPort), cgoAllocsUnknown
	cpucFileName, cpucFileNameAllocMap := copyPUcharBytes((*sliceHeader)(unsafe.Pointer(&pucFileName)))
	cuiNameLen, cuiNameLenAllocMap := (C.uint)(uiNameLen), cgoAllocsUnknown
	__ret := C.XENGINE_CACrlStop_Encap(cipAddress, cnPort, cpucFileName, cuiNameLen)
	runtime.KeepAlive(cuiNameLenAllocMap)
	runtime.KeepAlive(cpucFileNameAllocMap)
	runtime.KeepAlive(cnPortAllocMap)
	runtime.KeepAlive(cipAddressAllocMap)
	__v := (int32)(__ret)
	return __v
}

// XENGINE_CACrlStatus_Encap function as declared in mgmt/xengine_mgmt_op.h:1205
func XENGINE_CACrlStatus_Encap(ipAddress []byte, nPort uint16, pucFileName []byte, uiNameLen uint32, puiStatus []uint32) int32 {
	cipAddress, cipAddressAllocMap := copyPCharBytes((*sliceHeader)(unsafe.Pointer(&ipAddress)))
	cnPort, cnPortAllocMap := (C.ushort)(nPort), cgoAllocsUnknown
	cpucFileName, cpucFileNameAllocMap := copyPUcharBytes((*sliceHeader)(unsafe.Pointer(&pucFileName)))
	cuiNameLen, cuiNameLenAllocMap := (C.uint)(uiNameLen), cgoAllocsUnknown
	cpuiStatus, cpuiStatusAllocMap := copyPUintBytes((*sliceHeader)(unsafe.Pointer(&puiStatus)))
	__ret := C.XENGINE_CACrlStatus_Encap(cipAddress, cnPort, cpucFileName, cuiNameLen, cpuiStatus)
	runtime.KeepAlive(cpuiStatusAllocMap)
	runtime.KeepAlive(cuiNameLenAllocMap)
	runtime.KeepAlive(cpucFileNameAllocMap)
	runtime.KeepAlive(cnPortAllocMap)
	runtime.KeepAlive(cipAddressAllocMap)
	__v := (int32)(__ret)
	return __v
}

// XENGINE_MgmtQueryUserList_Encap function as declared in mgmt/xengine_mgmt_op.h:1213
func XENGINE_MgmtQueryUserList_Encap(ipAddress []byte, nPort uint16, pUserList []byte, pBufSize []uint32) int32 {
	cipAddress, cipAddressAllocMap := copyPCharBytes((*sliceHeader)(unsafe.Pointer(&ipAddress)))
	cnPort, cnPortAllocMap := (C.ushort)(nPort), cgoAllocsUnknown
	cpUserList, cpUserListAllocMap := copyPUcharBytes((*sliceHeader)(unsafe.Pointer(&pUserList)))
	cpBufSize, cpBufSizeAllocMap := copyPUintBytes((*sliceHeader)(unsafe.Pointer(&pBufSize)))
	__ret := C.XENGINE_MgmtQueryUserList_Encap(cipAddress, cnPort, cpUserList, cpBufSize)
	runtime.KeepAlive(cpBufSizeAllocMap)
	runtime.KeepAlive(cpUserListAllocMap)
	runtime.KeepAlive(cnPortAllocMap)
	runtime.KeepAlive(cipAddressAllocMap)
	__v := (int32)(__ret)
	return __v
}

// XENGINE_MgmtAddUser_Encap function as declared in mgmt/xengine_mgmt_op.h:1226
func XENGINE_MgmtAddUser_Encap(ipAddress []byte, nPort uint16, pUser []byte, opration byte, pSRP5 []byte) int32 {
	cipAddress, cipAddressAllocMap := copyPCharBytes((*sliceHeader)(unsafe.Pointer(&ipAddress)))
	cnPort, cnPortAllocMap := (C.ushort)(nPort), cgoAllocsUnknown
	cpUser, cpUserAllocMap := copyPUcharBytes((*sliceHeader)(unsafe.Pointer(&pUser)))
	copration, coprationAllocMap := (C.char)(opration), cgoAllocsUnknown
	cpSRP5, cpSRP5AllocMap := copyPUcharBytes((*sliceHeader)(unsafe.Pointer(&pSRP5)))
	__ret := C.XENGINE_MgmtAddUser_Encap(cipAddress, cnPort, cpUser, copration, cpSRP5)
	runtime.KeepAlive(cpSRP5AllocMap)
	runtime.KeepAlive(coprationAllocMap)
	runtime.KeepAlive(cpUserAllocMap)
	runtime.KeepAlive(cnPortAllocMap)
	runtime.KeepAlive(cipAddressAllocMap)
	__v := (int32)(__ret)
	return __v
}

// XENGINE_MgmtDelUser_Encap function as declared in mgmt/xengine_mgmt_op.h:1234
func XENGINE_MgmtDelUser_Encap(ipAddress []byte, nPort uint16, pUser []byte, nOp byte) int32 {
	cipAddress, cipAddressAllocMap := copyPCharBytes((*sliceHeader)(unsafe.Pointer(&ipAddress)))
	cnPort, cnPortAllocMap := (C.ushort)(nPort), cgoAllocsUnknown
	cpUser, cpUserAllocMap := copyPUcharBytes((*sliceHeader)(unsafe.Pointer(&pUser)))
	cnOp, cnOpAllocMap := (C.char)(nOp), cgoAllocsUnknown
	__ret := C.XENGINE_MgmtDelUser_Encap(cipAddress, cnPort, cpUser, cnOp)
	runtime.KeepAlive(cnOpAllocMap)
	runtime.KeepAlive(cpUserAllocMap)
	runtime.KeepAlive(cnPortAllocMap)
	runtime.KeepAlive(cipAddressAllocMap)
	__v := (int32)(__ret)
	return __v
}

// XENGINE_MgmtQueryUser_Encap function as declared in mgmt/xengine_mgmt_op.h:1242
func XENGINE_MgmtQueryUser_Encap(ipAddress []byte, nPort uint16, pUser []byte, pIdType []byte) int32 {
	cipAddress, cipAddressAllocMap := copyPCharBytes((*sliceHeader)(unsafe.Pointer(&ipAddress)))
	cnPort, cnPortAllocMap := (C.ushort)(nPort), cgoAllocsUnknown
	cpUser, cpUserAllocMap := copyPUcharBytes((*sliceHeader)(unsafe.Pointer(&pUser)))
	cpIdType, cpIdTypeAllocMap := copyPUcharBytes((*sliceHeader)(unsafe.Pointer(&pIdType)))
	__ret := C.XENGINE_MgmtQueryUser_Encap(cipAddress, cnPort, cpUser, cpIdType)
	runtime.KeepAlive(cpIdTypeAllocMap)
	runtime.KeepAlive(cpUserAllocMap)
	runtime.KeepAlive(cnPortAllocMap)
	runtime.KeepAlive(cipAddressAllocMap)
	__v := (int32)(__ret)
	return __v
}

// XENGINE_DelKeySet_Encap function as declared in mgmt/xengine_mgmt_op.h:1249
func XENGINE_DelKeySet_Encap(ipAddress []byte, nPort uint16, nIndex uint32) int32 {
	cipAddress, cipAddressAllocMap := copyPCharBytes((*sliceHeader)(unsafe.Pointer(&ipAddress)))
	cnPort, cnPortAllocMap := (C.ushort)(nPort), cgoAllocsUnknown
	cnIndex, cnIndexAllocMap := (C.uint)(nIndex), cgoAllocsUnknown
	__ret := C.XENGINE_DelKeySet_Encap(cipAddress, cnPort, cnIndex)
	runtime.KeepAlive(cnIndexAllocMap)
	runtime.KeepAlive(cnPortAllocMap)
	runtime.KeepAlive(cipAddressAllocMap)
	__v := (int32)(__ret)
	return __v
}

// XENGINE_DeleteFile_Encap function as declared in mgmt/xengine_mgmt_op.h:1255
func XENGINE_DeleteFile_Encap(ipAddress []byte, nPort uint16, pucFileName []byte, uiNameLen uint32) int32 {
	cipAddress, cipAddressAllocMap := copyPCharBytes((*sliceHeader)(unsafe.Pointer(&ipAddress)))
	cnPort, cnPortAllocMap := (C.ushort)(nPort), cgoAllocsUnknown
	cpucFileName, cpucFileNameAllocMap := copyPUcharBytes((*sliceHeader)(unsafe.Pointer(&pucFileName)))
	cuiNameLen, cuiNameLenAllocMap := (C.uint)(uiNameLen), cgoAllocsUnknown
	__ret := C.XENGINE_DeleteFile_Encap(cipAddress, cnPort, cpucFileName, cuiNameLen)
	runtime.KeepAlive(cuiNameLenAllocMap)
	runtime.KeepAlive(cpucFileNameAllocMap)
	runtime.KeepAlive(cnPortAllocMap)
	runtime.KeepAlive(cipAddressAllocMap)
	__v := (int32)(__ret)
	return __v
}

// XENGINE_QueryServiceStatus_Encap function as declared in mgmt/xengine_mgmt_op.h:1277
func XENGINE_QueryServiceStatus_Encap(ipAddress []byte, nPort uint16, nIndex uint32, nQueryItem uint32, pBuf []byte, pLen []uint32) int32 {
	cipAddress, cipAddressAllocMap := copyPCharBytes((*sliceHeader)(unsafe.Pointer(&ipAddress)))
	cnPort, cnPortAllocMap := (C.ushort)(nPort), cgoAllocsUnknown
	cnIndex, cnIndexAllocMap := (C.uint)(nIndex), cgoAllocsUnknown
	cnQueryItem, cnQueryItemAllocMap := (C.uint)(nQueryItem), cgoAllocsUnknown
	cpBuf, cpBufAllocMap := copyPUcharBytes((*sliceHeader)(unsafe.Pointer(&pBuf)))
	cpLen, cpLenAllocMap := copyPUintBytes((*sliceHeader)(unsafe.Pointer(&pLen)))
	__ret := C.XENGINE_QueryServiceStatus_Encap(cipAddress, cnPort, cnIndex, cnQueryItem, cpBuf, cpLen)
	runtime.KeepAlive(cpLenAllocMap)
	runtime.KeepAlive(cpBufAllocMap)
	runtime.KeepAlive(cnQueryItemAllocMap)
	runtime.KeepAlive(cnIndexAllocMap)
	runtime.KeepAlive(cnPortAllocMap)
	runtime.KeepAlive(cipAddressAllocMap)
	__v := (int32)(__ret)
	return __v
}

// XENGINE_ChangePrvKeyPassword_Encap function as declared in mgmt/xengine_mgmt_op.h:1301
func XENGINE_ChangePrvKeyPassword_Encap(ipAddress []byte, nPort uint16, nIndex uint32, pOldPasswd []byte, nOldPassLen int32, pNewPasswd []byte, nNewPassLen int32) int32 {
	cipAddress, cipAddressAllocMap := copyPCharBytes((*sliceHeader)(unsafe.Pointer(&ipAddress)))
	cnPort, cnPortAllocMap := (C.ushort)(nPort), cgoAllocsUnknown
	cnIndex, cnIndexAllocMap := (C.uint)(nIndex), cgoAllocsUnknown
	cpOldPasswd, cpOldPasswdAllocMap := copyPUcharBytes((*sliceHeader)(unsafe.Pointer(&pOldPasswd)))
	cnOldPassLen, cnOldPassLenAllocMap := (C.int)(nOldPassLen), cgoAllocsUnknown
	cpNewPasswd, cpNewPasswdAllocMap := copyPUcharBytes((*sliceHeader)(unsafe.Pointer(&pNewPasswd)))
	cnNewPassLen, cnNewPassLenAllocMap := (C.int)(nNewPassLen), cgoAllocsUnknown
	__ret := C.XENGINE_ChangePrvKeyPassword_Encap(cipAddress, cnPort, cnIndex, cpOldPasswd, cnOldPassLen, cpNewPasswd, cnNewPassLen)
	runtime.KeepAlive(cnNewPassLenAllocMap)
	runtime.KeepAlive(cpNewPasswdAllocMap)
	runtime.KeepAlive(cnOldPassLenAllocMap)
	runtime.KeepAlive(cpOldPasswdAllocMap)
	runtime.KeepAlive(cnIndexAllocMap)
	runtime.KeepAlive(cnPortAllocMap)
	runtime.KeepAlive(cipAddressAllocMap)
	__v := (int32)(__ret)
	return __v
}

// XENGINE_ReadParameter_Encap function as declared in mgmt/xengine_mgmt_op.h:1323
func XENGINE_ReadParameter_Encap(ipAddress []byte, nPort uint16, nIndex uint32, pnType []uint32, pData []byte, pnDataLen []uint32) int32 {
	cipAddress, cipAddressAllocMap := copyPCharBytes((*sliceHeader)(unsafe.Pointer(&ipAddress)))
	cnPort, cnPortAllocMap := (C.ushort)(nPort), cgoAllocsUnknown
	cnIndex, cnIndexAllocMap := (C.uint)(nIndex), cgoAllocsUnknown
	cpnType, cpnTypeAllocMap := copyPUintBytes((*sliceHeader)(unsafe.Pointer(&pnType)))
	cpData, cpDataAllocMap := copyPUcharBytes((*sliceHeader)(unsafe.Pointer(&pData)))
	cpnDataLen, cpnDataLenAllocMap := copyPUintBytes((*sliceHeader)(unsafe.Pointer(&pnDataLen)))
	__ret := C.XENGINE_ReadParameter_Encap(cipAddress, cnPort, cnIndex, cpnType, cpData, cpnDataLen)
	runtime.KeepAlive(cpnDataLenAllocMap)
	runtime.KeepAlive(cpDataAllocMap)
	runtime.KeepAlive(cpnTypeAllocMap)
	runtime.KeepAlive(cnIndexAllocMap)
	runtime.KeepAlive(cnPortAllocMap)
	runtime.KeepAlive(cipAddressAllocMap)
	__v := (int32)(__ret)
	return __v
}

// XENGINE_ReadId_Encap function as declared in mgmt/xengine_mgmt_op.h:1332
func XENGINE_ReadId_Encap(ipAddress []byte, nPort uint16, nIndex uint32, pData []byte, pnDataLen []uint32) int32 {
	cipAddress, cipAddressAllocMap := copyPCharBytes((*sliceHeader)(unsafe.Pointer(&ipAddress)))
	cnPort, cnPortAllocMap := (C.ushort)(nPort), cgoAllocsUnknown
	cnIndex, cnIndexAllocMap := (C.uint)(nIndex), cgoAllocsUnknown
	cpData, cpDataAllocMap := copyPUcharBytes((*sliceHeader)(unsafe.Pointer(&pData)))
	cpnDataLen, cpnDataLenAllocMap := copyPUintBytes((*sliceHeader)(unsafe.Pointer(&pnDataLen)))
	__ret := C.XENGINE_ReadId_Encap(cipAddress, cnPort, cnIndex, cpData, cpnDataLen)
	runtime.KeepAlive(cpnDataLenAllocMap)
	runtime.KeepAlive(cpDataAllocMap)
	runtime.KeepAlive(cnIndexAllocMap)
	runtime.KeepAlive(cnPortAllocMap)
	runtime.KeepAlive(cipAddressAllocMap)
	__v := (int32)(__ret)
	return __v
}

// XENGINE_ReadCurve_Encap function as declared in mgmt/xengine_mgmt_op.h:1340
func XENGINE_ReadCurve_Encap(ipAddress []byte, nPort uint16, nIndex uint32, pData []byte, pnDataLen []uint32) int32 {
	cipAddress, cipAddressAllocMap := copyPCharBytes((*sliceHeader)(unsafe.Pointer(&ipAddress)))
	cnPort, cnPortAllocMap := (C.ushort)(nPort), cgoAllocsUnknown
	cnIndex, cnIndexAllocMap := (C.uint)(nIndex), cgoAllocsUnknown
	cpData, cpDataAllocMap := copyPUcharBytes((*sliceHeader)(unsafe.Pointer(&pData)))
	cpnDataLen, cpnDataLenAllocMap := copyPUintBytes((*sliceHeader)(unsafe.Pointer(&pnDataLen)))
	__ret := C.XENGINE_ReadCurve_Encap(cipAddress, cnPort, cnIndex, cpData, cpnDataLen)
	runtime.KeepAlive(cpnDataLenAllocMap)
	runtime.KeepAlive(cpDataAllocMap)
	runtime.KeepAlive(cnIndexAllocMap)
	runtime.KeepAlive(cnPortAllocMap)
	runtime.KeepAlive(cipAddressAllocMap)
	__v := (int32)(__ret)
	return __v
}

// XENGINE_ReadPrvKey_Encap function as declared in mgmt/xengine_mgmt_op.h:1348
func XENGINE_ReadPrvKey_Encap(ipAddress []byte, nPort uint16, nIndex int32, pnShare []uint32, pnType []uint32, pPasswd []byte, nPassLen int32, eMode int32, pProtectKey []byte, nProtectKeyLen int32, pData []byte, pnDataLen []uint32) int32 {
	cipAddress, cipAddressAllocMap := copyPCharBytes((*sliceHeader)(unsafe.Pointer(&ipAddress)))
	cnPort, cnPortAllocMap := (C.ushort)(nPort), cgoAllocsUnknown
	cnIndex, cnIndexAllocMap := (C.int)(nIndex), cgoAllocsUnknown
	cpnShare, cpnShareAllocMap := copyPUintBytes((*sliceHeader)(unsafe.Pointer(&pnShare)))
	cpnType, cpnTypeAllocMap := copyPUintBytes((*sliceHeader)(unsafe.Pointer(&pnType)))
	cpPasswd, cpPasswdAllocMap := copyPUcharBytes((*sliceHeader)(unsafe.Pointer(&pPasswd)))
	cnPassLen, cnPassLenAllocMap := (C.int)(nPassLen), cgoAllocsUnknown
	ceMode, ceModeAllocMap := (C.MkeyProtectMode_e)(eMode), cgoAllocsUnknown
	cpProtectKey, cpProtectKeyAllocMap := copyPUcharBytes((*sliceHeader)(unsafe.Pointer(&pProtectKey)))
	cnProtectKeyLen, cnProtectKeyLenAllocMap := (C.int)(nProtectKeyLen), cgoAllocsUnknown
	cpData, cpDataAllocMap := copyPUcharBytes((*sliceHeader)(unsafe.Pointer(&pData)))
	cpnDataLen, cpnDataLenAllocMap := copyPUintBytes((*sliceHeader)(unsafe.Pointer(&pnDataLen)))
	__ret := C.XENGINE_ReadPrvKey_Encap(cipAddress, cnPort, cnIndex, cpnShare, cpnType, cpPasswd, cnPassLen, ceMode, cpProtectKey, cnProtectKeyLen, cpData, cpnDataLen)
	runtime.KeepAlive(cpnDataLenAllocMap)
	runtime.KeepAlive(cpDataAllocMap)
	runtime.KeepAlive(cnProtectKeyLenAllocMap)
	runtime.KeepAlive(cpProtectKeyAllocMap)
	runtime.KeepAlive(ceModeAllocMap)
	runtime.KeepAlive(cnPassLenAllocMap)
	runtime.KeepAlive(cpPasswdAllocMap)
	runtime.KeepAlive(cpnTypeAllocMap)
	runtime.KeepAlive(cpnShareAllocMap)
	runtime.KeepAlive(cnIndexAllocMap)
	runtime.KeepAlive(cnPortAllocMap)
	runtime.KeepAlive(cipAddressAllocMap)
	__v := (int32)(__ret)
	return __v
}

// XENGINE_SetParameter_Encap function as declared in mgmt/xengine_mgmt_op.h:1378
func XENGINE_SetParameter_Encap(ipAddress []byte, nPort uint16, nIndex int32, nParamType uint32, pParamData []byte, nParamLen int32) int32 {
	cipAddress, cipAddressAllocMap := copyPCharBytes((*sliceHeader)(unsafe.Pointer(&ipAddress)))
	cnPort, cnPortAllocMap := (C.ushort)(nPort), cgoAllocsUnknown
	cnIndex, cnIndexAllocMap := (C.int)(nIndex), cgoAllocsUnknown
	cnParamType, cnParamTypeAllocMap := (C.uint)(nParamType), cgoAllocsUnknown
	cpParamData, cpParamDataAllocMap := copyPUcharBytes((*sliceHeader)(unsafe.Pointer(&pParamData)))
	cnParamLen, cnParamLenAllocMap := (C.int)(nParamLen), cgoAllocsUnknown
	__ret := C.XENGINE_SetParameter_Encap(cipAddress, cnPort, cnIndex, cnParamType, cpParamData, cnParamLen)
	runtime.KeepAlive(cnParamLenAllocMap)
	runtime.KeepAlive(cpParamDataAllocMap)
	runtime.KeepAlive(cnParamTypeAllocMap)
	runtime.KeepAlive(cnIndexAllocMap)
	runtime.KeepAlive(cnPortAllocMap)
	runtime.KeepAlive(cipAddressAllocMap)
	__v := (int32)(__ret)
	return __v
}

// XENGINE_SetParameter_Encap_Ex function as declared in mgmt/xengine_mgmt_op.h:1387
func XENGINE_SetParameter_Encap_Ex(ipAddress []byte, nPort uint16, nIndex int32, eMode int32, pProtectKey []byte, nProtectKeyLen uint32, nParamType uint32, pParamData []byte, nParamLen int32) int32 {
	cipAddress, cipAddressAllocMap := copyPCharBytes((*sliceHeader)(unsafe.Pointer(&ipAddress)))
	cnPort, cnPortAllocMap := (C.ushort)(nPort), cgoAllocsUnknown
	cnIndex, cnIndexAllocMap := (C.int)(nIndex), cgoAllocsUnknown
	ceMode, ceModeAllocMap := (C.MkeyProtectMode_e)(eMode), cgoAllocsUnknown
	cpProtectKey, cpProtectKeyAllocMap := copyPUcharBytes((*sliceHeader)(unsafe.Pointer(&pProtectKey)))
	cnProtectKeyLen, cnProtectKeyLenAllocMap := (C.uint)(nProtectKeyLen), cgoAllocsUnknown
	cnParamType, cnParamTypeAllocMap := (C.uint)(nParamType), cgoAllocsUnknown
	cpParamData, cpParamDataAllocMap := copyPUcharBytes((*sliceHeader)(unsafe.Pointer(&pParamData)))
	cnParamLen, cnParamLenAllocMap := (C.int)(nParamLen), cgoAllocsUnknown
	__ret := C.XENGINE_SetParameter_Encap_Ex(cipAddress, cnPort, cnIndex, ceMode, cpProtectKey, cnProtectKeyLen, cnParamType, cpParamData, cnParamLen)
	runtime.KeepAlive(cnParamLenAllocMap)
	runtime.KeepAlive(cpParamDataAllocMap)
	runtime.KeepAlive(cnParamTypeAllocMap)
	runtime.KeepAlive(cnProtectKeyLenAllocMap)
	runtime.KeepAlive(cpProtectKeyAllocMap)
	runtime.KeepAlive(ceModeAllocMap)
	runtime.KeepAlive(cnIndexAllocMap)
	runtime.KeepAlive(cnPortAllocMap)
	runtime.KeepAlive(cipAddressAllocMap)
	__v := (int32)(__ret)
	return __v
}

// XENGINE_SetId_Encap function as declared in mgmt/xengine_mgmt_op.h:1399
func XENGINE_SetId_Encap(ipAddress []byte, nPort uint16, nIndex int32, nParamType uint32, pParamData []byte, nParamLen int32) int32 {
	cipAddress, cipAddressAllocMap := copyPCharBytes((*sliceHeader)(unsafe.Pointer(&ipAddress)))
	cnPort, cnPortAllocMap := (C.ushort)(nPort), cgoAllocsUnknown
	cnIndex, cnIndexAllocMap := (C.int)(nIndex), cgoAllocsUnknown
	cnParamType, cnParamTypeAllocMap := (C.uint)(nParamType), cgoAllocsUnknown
	cpParamData, cpParamDataAllocMap := copyPUcharBytes((*sliceHeader)(unsafe.Pointer(&pParamData)))
	cnParamLen, cnParamLenAllocMap := (C.int)(nParamLen), cgoAllocsUnknown
	__ret := C.XENGINE_SetId_Encap(cipAddress, cnPort, cnIndex, cnParamType, cpParamData, cnParamLen)
	runtime.KeepAlive(cnParamLenAllocMap)
	runtime.KeepAlive(cpParamDataAllocMap)
	runtime.KeepAlive(cnParamTypeAllocMap)
	runtime.KeepAlive(cnIndexAllocMap)
	runtime.KeepAlive(cnPortAllocMap)
	runtime.KeepAlive(cipAddressAllocMap)
	__v := (int32)(__ret)
	return __v
}

// XENGINE_SetCurve_Encap function as declared in mgmt/xengine_mgmt_op.h:1408
func XENGINE_SetCurve_Encap(ipAddress []byte, nPort uint16, nIndex int32, nParamType uint32, pParamData []byte, nParamLen int32) int32 {
	cipAddress, cipAddressAllocMap := copyPCharBytes((*sliceHeader)(unsafe.Pointer(&ipAddress)))
	cnPort, cnPortAllocMap := (C.ushort)(nPort), cgoAllocsUnknown
	cnIndex, cnIndexAllocMap := (C.int)(nIndex), cgoAllocsUnknown
	cnParamType, cnParamTypeAllocMap := (C.uint)(nParamType), cgoAllocsUnknown
	cpParamData, cpParamDataAllocMap := copyPUcharBytes((*sliceHeader)(unsafe.Pointer(&pParamData)))
	cnParamLen, cnParamLenAllocMap := (C.int)(nParamLen), cgoAllocsUnknown
	__ret := C.XENGINE_SetCurve_Encap(cipAddress, cnPort, cnIndex, cnParamType, cpParamData, cnParamLen)
	runtime.KeepAlive(cnParamLenAllocMap)
	runtime.KeepAlive(cpParamDataAllocMap)
	runtime.KeepAlive(cnParamTypeAllocMap)
	runtime.KeepAlive(cnIndexAllocMap)
	runtime.KeepAlive(cnPortAllocMap)
	runtime.KeepAlive(cipAddressAllocMap)
	__v := (int32)(__ret)
	return __v
}

// XENGINE_GetServerVer_Encap function as declared in mgmt/xengine_mgmt_op.h:1417
func XENGINE_GetServerVer_Encap(ipAddress []byte, nPort uint16, pVerInfo []byte, pnVerLen []uint32) int32 {
	cipAddress, cipAddressAllocMap := copyPCharBytes((*sliceHeader)(unsafe.Pointer(&ipAddress)))
	cnPort, cnPortAllocMap := (C.ushort)(nPort), cgoAllocsUnknown
	cpVerInfo, cpVerInfoAllocMap := copyPUcharBytes((*sliceHeader)(unsafe.Pointer(&pVerInfo)))
	cpnVerLen, cpnVerLenAllocMap := copyPUintBytes((*sliceHeader)(unsafe.Pointer(&pnVerLen)))
	__ret := C.XENGINE_GetServerVer_Encap(cipAddress, cnPort, cpVerInfo, cpnVerLen)
	runtime.KeepAlive(cpnVerLenAllocMap)
	runtime.KeepAlive(cpVerInfoAllocMap)
	runtime.KeepAlive(cnPortAllocMap)
	runtime.KeepAlive(cipAddressAllocMap)
	__v := (int32)(__ret)
	return __v
}

// XENGINE_ManageBlackList_Encap function as declared in mgmt/xengine_mgmt_op.h:1424
func XENGINE_ManageBlackList_Encap(ipAddress []byte, nPort uint16, nIndex int32, nOperation uint32, pID []byte, nIDLen []uint32, nIDNum []uint32) int32 {
	cipAddress, cipAddressAllocMap := copyPCharBytes((*sliceHeader)(unsafe.Pointer(&ipAddress)))
	cnPort, cnPortAllocMap := (C.ushort)(nPort), cgoAllocsUnknown
	cnIndex, cnIndexAllocMap := (C.int)(nIndex), cgoAllocsUnknown
	cnOperation, cnOperationAllocMap := (C.uint)(nOperation), cgoAllocsUnknown
	cpID, cpIDAllocMap := copyPUcharBytes((*sliceHeader)(unsafe.Pointer(&pID)))
	cnIDLen, cnIDLenAllocMap := copyPUintBytes((*sliceHeader)(unsafe.Pointer(&nIDLen)))
	cnIDNum, cnIDNumAllocMap := copyPUintBytes((*sliceHeader)(unsafe.Pointer(&nIDNum)))
	__ret := C.XENGINE_ManageBlackList_Encap(cipAddress, cnPort, cnIndex, cnOperation, cpID, cnIDLen, cnIDNum)
	runtime.KeepAlive(cnIDNumAllocMap)
	runtime.KeepAlive(cnIDLenAllocMap)
	runtime.KeepAlive(cpIDAllocMap)
	runtime.KeepAlive(cnOperationAllocMap)
	runtime.KeepAlive(cnIndexAllocMap)
	runtime.KeepAlive(cnPortAllocMap)
	runtime.KeepAlive(cipAddressAllocMap)
	__v := (int32)(__ret)
	return __v
}

// XENGINE_ManageIPList_Encap function as declared in mgmt/xengine_mgmt_op.h:1434
func XENGINE_ManageIPList_Encap(ipAddress []byte, nPort uint16, nIndex int32, nOperation uint32, pIP []byte, nIPLen []uint32, nIPNum []uint32) int32 {
	cipAddress, cipAddressAllocMap := copyPCharBytes((*sliceHeader)(unsafe.Pointer(&ipAddress)))
	cnPort, cnPortAllocMap := (C.ushort)(nPort), cgoAllocsUnknown
	cnIndex, cnIndexAllocMap := (C.int)(nIndex), cgoAllocsUnknown
	cnOperation, cnOperationAllocMap := (C.uint)(nOperation), cgoAllocsUnknown
	cpIP, cpIPAllocMap := copyPUcharBytes((*sliceHeader)(unsafe.Pointer(&pIP)))
	cnIPLen, cnIPLenAllocMap := copyPUintBytes((*sliceHeader)(unsafe.Pointer(&nIPLen)))
	cnIPNum, cnIPNumAllocMap := copyPUintBytes((*sliceHeader)(unsafe.Pointer(&nIPNum)))
	__ret := C.XENGINE_ManageIPList_Encap(cipAddress, cnPort, cnIndex, cnOperation, cpIP, cnIPLen, cnIPNum)
	runtime.KeepAlive(cnIPNumAllocMap)
	runtime.KeepAlive(cnIPLenAllocMap)
	runtime.KeepAlive(cpIPAllocMap)
	runtime.KeepAlive(cnOperationAllocMap)
	runtime.KeepAlive(cnIndexAllocMap)
	runtime.KeepAlive(cnPortAllocMap)
	runtime.KeepAlive(cipAddressAllocMap)
	__v := (int32)(__ret)
	return __v
}

// XENGINE_ManageIPAddr_Encap function as declared in mgmt/xengine_mgmt_op.h:1444
func XENGINE_ManageIPAddr_Encap(ipAddress []byte, nPort uint16, nIndex int32, nOperation uint32, pIPAddr []byte, nIPAddrLen []uint32) int32 {
	cipAddress, cipAddressAllocMap := copyPCharBytes((*sliceHeader)(unsafe.Pointer(&ipAddress)))
	cnPort, cnPortAllocMap := (C.ushort)(nPort), cgoAllocsUnknown
	cnIndex, cnIndexAllocMap := (C.int)(nIndex), cgoAllocsUnknown
	cnOperation, cnOperationAllocMap := (C.uint)(nOperation), cgoAllocsUnknown
	cpIPAddr, cpIPAddrAllocMap := copyPUcharBytes((*sliceHeader)(unsafe.Pointer(&pIPAddr)))
	cnIPAddrLen, cnIPAddrLenAllocMap := copyPUintBytes((*sliceHeader)(unsafe.Pointer(&nIPAddrLen)))
	__ret := C.XENGINE_ManageIPAddr_Encap(cipAddress, cnPort, cnIndex, cnOperation, cpIPAddr, cnIPAddrLen)
	runtime.KeepAlive(cnIPAddrLenAllocMap)
	runtime.KeepAlive(cpIPAddrAllocMap)
	runtime.KeepAlive(cnOperationAllocMap)
	runtime.KeepAlive(cnIndexAllocMap)
	runtime.KeepAlive(cnPortAllocMap)
	runtime.KeepAlive(cipAddressAllocMap)
	__v := (int32)(__ret)
	return __v
}

// XENGINE_ManageTime_Encap function as declared in mgmt/xengine_mgmt_op.h:1453
func XENGINE_ManageTime_Encap(ipAddress []byte, nPort uint16, nIndex int32, nOperation uint32, pTime []byte, nTimeLen []uint32) int32 {
	cipAddress, cipAddressAllocMap := copyPCharBytes((*sliceHeader)(unsafe.Pointer(&ipAddress)))
	cnPort, cnPortAllocMap := (C.ushort)(nPort), cgoAllocsUnknown
	cnIndex, cnIndexAllocMap := (C.int)(nIndex), cgoAllocsUnknown
	cnOperation, cnOperationAllocMap := (C.uint)(nOperation), cgoAllocsUnknown
	cpTime, cpTimeAllocMap := copyPUcharBytes((*sliceHeader)(unsafe.Pointer(&pTime)))
	cnTimeLen, cnTimeLenAllocMap := copyPUintBytes((*sliceHeader)(unsafe.Pointer(&nTimeLen)))
	__ret := C.XENGINE_ManageTime_Encap(cipAddress, cnPort, cnIndex, cnOperation, cpTime, cnTimeLen)
	runtime.KeepAlive(cnTimeLenAllocMap)
	runtime.KeepAlive(cpTimeAllocMap)
	runtime.KeepAlive(cnOperationAllocMap)
	runtime.KeepAlive(cnIndexAllocMap)
	runtime.KeepAlive(cnPortAllocMap)
	runtime.KeepAlive(cipAddressAllocMap)
	__v := (int32)(__ret)
	return __v
}

// XENGINE_SetPrvKey_Encap function as declared in mgmt/xengine_mgmt_op.h:1462
func XENGINE_SetPrvKey_Encap(ipAddress []byte, nPort uint16, nIndex int32, nShare uint32, eMode int32, pProtectKey []byte, nProtectKeyLen int32, nKeyType uint32, pKeyData []byte, nKeyLen int32, pPasswd []byte, nPassLen int32) int32 {
	cipAddress, cipAddressAllocMap := copyPCharBytes((*sliceHeader)(unsafe.Pointer(&ipAddress)))
	cnPort, cnPortAllocMap := (C.ushort)(nPort), cgoAllocsUnknown
	cnIndex, cnIndexAllocMap := (C.int)(nIndex), cgoAllocsUnknown
	cnShare, cnShareAllocMap := (C.uint)(nShare), cgoAllocsUnknown
	ceMode, ceModeAllocMap := (C.MkeyProtectMode_e)(eMode), cgoAllocsUnknown
	cpProtectKey, cpProtectKeyAllocMap := copyPUcharBytes((*sliceHeader)(unsafe.Pointer(&pProtectKey)))
	cnProtectKeyLen, cnProtectKeyLenAllocMap := (C.int)(nProtectKeyLen), cgoAllocsUnknown
	cnKeyType, cnKeyTypeAllocMap := (C.uint)(nKeyType), cgoAllocsUnknown
	cpKeyData, cpKeyDataAllocMap := copyPUcharBytes((*sliceHeader)(unsafe.Pointer(&pKeyData)))
	cnKeyLen, cnKeyLenAllocMap := (C.int)(nKeyLen), cgoAllocsUnknown
	cpPasswd, cpPasswdAllocMap := copyPUcharBytes((*sliceHeader)(unsafe.Pointer(&pPasswd)))
	cnPassLen, cnPassLenAllocMap := (C.int)(nPassLen), cgoAllocsUnknown
	__ret := C.XENGINE_SetPrvKey_Encap(cipAddress, cnPort, cnIndex, cnShare, ceMode, cpProtectKey, cnProtectKeyLen, cnKeyType, cpKeyData, cnKeyLen, cpPasswd, cnPassLen)
	runtime.KeepAlive(cnPassLenAllocMap)
	runtime.KeepAlive(cpPasswdAllocMap)
	runtime.KeepAlive(cnKeyLenAllocMap)
	runtime.KeepAlive(cpKeyDataAllocMap)
	runtime.KeepAlive(cnKeyTypeAllocMap)
	runtime.KeepAlive(cnProtectKeyLenAllocMap)
	runtime.KeepAlive(cpProtectKeyAllocMap)
	runtime.KeepAlive(ceModeAllocMap)
	runtime.KeepAlive(cnShareAllocMap)
	runtime.KeepAlive(cnIndexAllocMap)
	runtime.KeepAlive(cnPortAllocMap)
	runtime.KeepAlive(cipAddressAllocMap)
	__v := (int32)(__ret)
	return __v
}

// XENGINE_SetCredential_Encap function as declared in mgmt/xengine_mgmt_op.h:1477
func XENGINE_SetCredential_Encap(ipAddress []byte, nPort uint16, nIndex int32, nOp uint32, pPasswd []byte, nPassLen int32) int32 {
	cipAddress, cipAddressAllocMap := copyPCharBytes((*sliceHeader)(unsafe.Pointer(&ipAddress)))
	cnPort, cnPortAllocMap := (C.ushort)(nPort), cgoAllocsUnknown
	cnIndex, cnIndexAllocMap := (C.int)(nIndex), cgoAllocsUnknown
	cnOp, cnOpAllocMap := (C.uint)(nOp), cgoAllocsUnknown
	cpPasswd, cpPasswdAllocMap := copyPUcharBytes((*sliceHeader)(unsafe.Pointer(&pPasswd)))
	cnPassLen, cnPassLenAllocMap := (C.int)(nPassLen), cgoAllocsUnknown
	__ret := C.XENGINE_SetCredential_Encap(cipAddress, cnPort, cnIndex, cnOp, cpPasswd, cnPassLen)
	runtime.KeepAlive(cnPassLenAllocMap)
	runtime.KeepAlive(cpPasswdAllocMap)
	runtime.KeepAlive(cnOpAllocMap)
	runtime.KeepAlive(cnIndexAllocMap)
	runtime.KeepAlive(cnPortAllocMap)
	runtime.KeepAlive(cipAddressAllocMap)
	__v := (int32)(__ret)
	return __v
}

// XENGINE_ChangeCredential_Encap function as declared in mgmt/xengine_mgmt_op.h:1486
func XENGINE_ChangeCredential_Encap(ipAddress []byte, nPort uint16, nIndex int32, pOldPasswd []byte, nOldPassLen int32, pNewPasswd []byte, nNewPassLen int32) int32 {
	cipAddress, cipAddressAllocMap := copyPCharBytes((*sliceHeader)(unsafe.Pointer(&ipAddress)))
	cnPort, cnPortAllocMap := (C.ushort)(nPort), cgoAllocsUnknown
	cnIndex, cnIndexAllocMap := (C.int)(nIndex), cgoAllocsUnknown
	cpOldPasswd, cpOldPasswdAllocMap := copyPUcharBytes((*sliceHeader)(unsafe.Pointer(&pOldPasswd)))
	cnOldPassLen, cnOldPassLenAllocMap := (C.int)(nOldPassLen), cgoAllocsUnknown
	cpNewPasswd, cpNewPasswdAllocMap := copyPUcharBytes((*sliceHeader)(unsafe.Pointer(&pNewPasswd)))
	cnNewPassLen, cnNewPassLenAllocMap := (C.int)(nNewPassLen), cgoAllocsUnknown
	__ret := C.XENGINE_ChangeCredential_Encap(cipAddress, cnPort, cnIndex, cpOldPasswd, cnOldPassLen, cpNewPasswd, cnNewPassLen)
	runtime.KeepAlive(cnNewPassLenAllocMap)
	runtime.KeepAlive(cpNewPasswdAllocMap)
	runtime.KeepAlive(cnOldPassLenAllocMap)
	runtime.KeepAlive(cpOldPasswdAllocMap)
	runtime.KeepAlive(cnIndexAllocMap)
	runtime.KeepAlive(cnPortAllocMap)
	runtime.KeepAlive(cipAddressAllocMap)
	__v := (int32)(__ret)
	return __v
}

// XENGINE_SetLicense_Encap function as declared in mgmt/xengine_mgmt_op.h:1496
func XENGINE_SetLicense_Encap(ipAddress []byte, nPort uint16, nIndex int32, nOp uint32, pLicense []byte, nLicenseLen []uint32, nLicenseTNum []uint32, nLicenseCNum []uint32) int32 {
	cipAddress, cipAddressAllocMap := copyPCharBytes((*sliceHeader)(unsafe.Pointer(&ipAddress)))
	cnPort, cnPortAllocMap := (C.ushort)(nPort), cgoAllocsUnknown
	cnIndex, cnIndexAllocMap := (C.int)(nIndex), cgoAllocsUnknown
	cnOp, cnOpAllocMap := (C.uint)(nOp), cgoAllocsUnknown
	cpLicense, cpLicenseAllocMap := copyPUcharBytes((*sliceHeader)(unsafe.Pointer(&pLicense)))
	cnLicenseLen, cnLicenseLenAllocMap := copyPUintBytes((*sliceHeader)(unsafe.Pointer(&nLicenseLen)))
	cnLicenseTNum, cnLicenseTNumAllocMap := copyPUintBytes((*sliceHeader)(unsafe.Pointer(&nLicenseTNum)))
	cnLicenseCNum, cnLicenseCNumAllocMap := copyPUintBytes((*sliceHeader)(unsafe.Pointer(&nLicenseCNum)))
	__ret := C.XENGINE_SetLicense_Encap(cipAddress, cnPort, cnIndex, cnOp, cpLicense, cnLicenseLen, cnLicenseTNum, cnLicenseCNum)
	runtime.KeepAlive(cnLicenseCNumAllocMap)
	runtime.KeepAlive(cnLicenseTNumAllocMap)
	runtime.KeepAlive(cnLicenseLenAllocMap)
	runtime.KeepAlive(cpLicenseAllocMap)
	runtime.KeepAlive(cnOpAllocMap)
	runtime.KeepAlive(cnIndexAllocMap)
	runtime.KeepAlive(cnPortAllocMap)
	runtime.KeepAlive(cipAddressAllocMap)
	__v := (int32)(__ret)
	return __v
}

// XENGINE_SetDevLicense_Encap function as declared in mgmt/xengine_mgmt_op.h:1507
func XENGINE_SetDevLicense_Encap(ipAddress []byte, nPort uint16, nOp uint32, pLicense []byte, nLicenseLen []uint32) int32 {
	cipAddress, cipAddressAllocMap := copyPCharBytes((*sliceHeader)(unsafe.Pointer(&ipAddress)))
	cnPort, cnPortAllocMap := (C.ushort)(nPort), cgoAllocsUnknown
	cnOp, cnOpAllocMap := (C.uint)(nOp), cgoAllocsUnknown
	cpLicense, cpLicenseAllocMap := copyPUcharBytes((*sliceHeader)(unsafe.Pointer(&pLicense)))
	cnLicenseLen, cnLicenseLenAllocMap := copyPUintBytes((*sliceHeader)(unsafe.Pointer(&nLicenseLen)))
	__ret := C.XENGINE_SetDevLicense_Encap(cipAddress, cnPort, cnOp, cpLicense, cnLicenseLen)
	runtime.KeepAlive(cnLicenseLenAllocMap)
	runtime.KeepAlive(cpLicenseAllocMap)
	runtime.KeepAlive(cnOpAllocMap)
	runtime.KeepAlive(cnPortAllocMap)
	runtime.KeepAlive(cipAddressAllocMap)
	__v := (int32)(__ret)
	return __v
}

// XENGINE_ListKeyInfo_Encap function as declared in mgmt/xengine_mgmt_op.h:1515
func XENGINE_ListKeyInfo_Encap(ipAddress []byte, nPort uint16, keyInf []XEngineKeyInfo_t, keyNum []uint32) int32 {
	cipAddress, cipAddressAllocMap := copyPCharBytes((*sliceHeader)(unsafe.Pointer(&ipAddress)))
	cnPort, cnPortAllocMap := (C.ushort)(nPort), cgoAllocsUnknown
	ckeyInf, ckeyInfAllocMap := unpackArgSXEngineKeyInfo_t(keyInf)
	ckeyNum, ckeyNumAllocMap := copyPUintBytes((*sliceHeader)(unsafe.Pointer(&keyNum)))
	__ret := C.XENGINE_ListKeyInfo_Encap(cipAddress, cnPort, ckeyInf, ckeyNum)
	runtime.KeepAlive(ckeyNumAllocMap)
	packSXEngineKeyInfo_t(keyInf, ckeyInf)
	runtime.KeepAlive(ckeyInfAllocMap)
	runtime.KeepAlive(cnPortAllocMap)
	runtime.KeepAlive(cipAddressAllocMap)
	__v := (int32)(__ret)
	return __v
}

// XENGINE_ListKeyInfoEx_Encap function as declared in mgmt/xengine_mgmt_op.h:1522
func XENGINE_ListKeyInfoEx_Encap(ipAddress []byte, nPort uint16, keyInf []XEngineKeyInfoEx_t, keyNum []uint32) int32 {
	cipAddress, cipAddressAllocMap := copyPCharBytes((*sliceHeader)(unsafe.Pointer(&ipAddress)))
	cnPort, cnPortAllocMap := (C.ushort)(nPort), cgoAllocsUnknown
	ckeyInf, ckeyInfAllocMap := unpackArgSXEngineKeyInfoEx_t(keyInf)
	ckeyNum, ckeyNumAllocMap := copyPUintBytes((*sliceHeader)(unsafe.Pointer(&keyNum)))
	__ret := C.XENGINE_ListKeyInfoEx_Encap(cipAddress, cnPort, ckeyInf, ckeyNum)
	runtime.KeepAlive(ckeyNumAllocMap)
	packSXEngineKeyInfoEx_t(keyInf, ckeyInf)
	runtime.KeepAlive(ckeyInfAllocMap)
	runtime.KeepAlive(cnPortAllocMap)
	runtime.KeepAlive(cipAddressAllocMap)
	__v := (int32)(__ret)
	return __v
}

// XENGINE_ListKeyInfoEx2_Encap function as declared in mgmt/xengine_mgmt_op.h:1529
func XENGINE_ListKeyInfoEx2_Encap(ipAddress []byte, nPort uint16, nStartPos uint32, nStopPos uint32, keyInf []XEngineKeyInfoEx_t, keyNum []uint32) int32 {
	cipAddress, cipAddressAllocMap := copyPCharBytes((*sliceHeader)(unsafe.Pointer(&ipAddress)))
	cnPort, cnPortAllocMap := (C.ushort)(nPort), cgoAllocsUnknown
	cnStartPos, cnStartPosAllocMap := (C.uint)(nStartPos), cgoAllocsUnknown
	cnStopPos, cnStopPosAllocMap := (C.uint)(nStopPos), cgoAllocsUnknown
	ckeyInf, ckeyInfAllocMap := unpackArgSXEngineKeyInfoEx_t(keyInf)
	ckeyNum, ckeyNumAllocMap := copyPUintBytes((*sliceHeader)(unsafe.Pointer(&keyNum)))
	__ret := C.XENGINE_ListKeyInfoEx2_Encap(cipAddress, cnPort, cnStartPos, cnStopPos, ckeyInf, ckeyNum)
	runtime.KeepAlive(ckeyNumAllocMap)
	packSXEngineKeyInfoEx_t(keyInf, ckeyInf)
	runtime.KeepAlive(ckeyInfAllocMap)
	runtime.KeepAlive(cnStopPosAllocMap)
	runtime.KeepAlive(cnStartPosAllocMap)
	runtime.KeepAlive(cnPortAllocMap)
	runtime.KeepAlive(cipAddressAllocMap)
	__v := (int32)(__ret)
	return __v
}

// XENGINE_RemoteBackup_EncapEx function as declared in mgmt/xengine_mgmt_op.h:1576
func XENGINE_RemoteBackup_EncapEx(ipSrcAddress []byte, ipDstAddress []byte, nPort uint16, nSrcIndex byte, nDstIndex byte, eMode int32, pPassword []byte, nPassLen uint32, nConversion uint32) int32 {
	cipSrcAddress, cipSrcAddressAllocMap := copyPCharBytes((*sliceHeader)(unsafe.Pointer(&ipSrcAddress)))
	cipDstAddress, cipDstAddressAllocMap := copyPCharBytes((*sliceHeader)(unsafe.Pointer(&ipDstAddress)))
	cnPort, cnPortAllocMap := (C.ushort)(nPort), cgoAllocsUnknown
	cnSrcIndex, cnSrcIndexAllocMap := (C.uchar)(nSrcIndex), cgoAllocsUnknown
	cnDstIndex, cnDstIndexAllocMap := (C.uchar)(nDstIndex), cgoAllocsUnknown
	ceMode, ceModeAllocMap := (C.MkeyProtectMode_e)(eMode), cgoAllocsUnknown
	cpPassword, cpPasswordAllocMap := copyPUcharBytes((*sliceHeader)(unsafe.Pointer(&pPassword)))
	cnPassLen, cnPassLenAllocMap := (C.uint)(nPassLen), cgoAllocsUnknown
	cnConversion, cnConversionAllocMap := (C.uint)(nConversion), cgoAllocsUnknown
	__ret := C.XENGINE_RemoteBackup_EncapEx(cipSrcAddress, cipDstAddress, cnPort, cnSrcIndex, cnDstIndex, ceMode, cpPassword, cnPassLen, cnConversion)
	runtime.KeepAlive(cnConversionAllocMap)
	runtime.KeepAlive(cnPassLenAllocMap)
	runtime.KeepAlive(cpPasswordAllocMap)
	runtime.KeepAlive(ceModeAllocMap)
	runtime.KeepAlive(cnDstIndexAllocMap)
	runtime.KeepAlive(cnSrcIndexAllocMap)
	runtime.KeepAlive(cnPortAllocMap)
	runtime.KeepAlive(cipDstAddressAllocMap)
	runtime.KeepAlive(cipSrcAddressAllocMap)
	__v := (int32)(__ret)
	return __v
}

// XENGINE_RemoteBackup_EncapEx2 function as declared in mgmt/xengine_mgmt_op.h:1588
func XENGINE_RemoteBackup_EncapEx2(ipSrcAddress []byte, ipDstAddress []byte, nPort uint16, nSrcIndex uint32, nDstIndex uint32, eMode int32, pPassword []byte, nPassLen uint32, bConversion uint32, nConversion uint32) int32 {
	cipSrcAddress, cipSrcAddressAllocMap := copyPCharBytes((*sliceHeader)(unsafe.Pointer(&ipSrcAddress)))
	cipDstAddress, cipDstAddressAllocMap := copyPCharBytes((*sliceHeader)(unsafe.Pointer(&ipDstAddress)))
	cnPort, cnPortAllocMap := (C.ushort)(nPort), cgoAllocsUnknown
	cnSrcIndex, cnSrcIndexAllocMap := (C.uint)(nSrcIndex), cgoAllocsUnknown
	cnDstIndex, cnDstIndexAllocMap := (C.uint)(nDstIndex), cgoAllocsUnknown
	ceMode, ceModeAllocMap := (C.MkeyProtectMode_e)(eMode), cgoAllocsUnknown
	cpPassword, cpPasswordAllocMap := copyPUcharBytes((*sliceHeader)(unsafe.Pointer(&pPassword)))
	cnPassLen, cnPassLenAllocMap := (C.uint)(nPassLen), cgoAllocsUnknown
	cbConversion, cbConversionAllocMap := (C.uint)(bConversion), cgoAllocsUnknown
	cnConversion, cnConversionAllocMap := (C.uint)(nConversion), cgoAllocsUnknown
	__ret := C.XENGINE_RemoteBackup_EncapEx2(cipSrcAddress, cipDstAddress, cnPort, cnSrcIndex, cnDstIndex, ceMode, cpPassword, cnPassLen, cbConversion, cnConversion)
	runtime.KeepAlive(cnConversionAllocMap)
	runtime.KeepAlive(cbConversionAllocMap)
	runtime.KeepAlive(cnPassLenAllocMap)
	runtime.KeepAlive(cpPasswordAllocMap)
	runtime.KeepAlive(ceModeAllocMap)
	runtime.KeepAlive(cnDstIndexAllocMap)
	runtime.KeepAlive(cnSrcIndexAllocMap)
	runtime.KeepAlive(cnPortAllocMap)
	runtime.KeepAlive(cipDstAddressAllocMap)
	runtime.KeepAlive(cipSrcAddressAllocMap)
	__v := (int32)(__ret)
	return __v
}

// XENGINEInitSecurityEnv function as declared in mgmt/xengine_mgmt_op.h:1601
func XENGINEInitSecurityEnv() int32 {
	__ret := C.XENGINEInitSecurityEnv()
	__v := (int32)(__ret)
	return __v
}

// XENGINESetSecurityEnv function as declared in mgmt/xengine_mgmt_op.h:1603
func XENGINESetSecurityEnv(sIp []byte, wport uint32, uAlg uint32, userId []byte, devId []byte, prvKey unsafe.Pointer, prvKeyLen int32, pubKey unsafe.Pointer, pubKeyLen int32) int32 {
	csIp, csIpAllocMap := copyPCharBytes((*sliceHeader)(unsafe.Pointer(&sIp)))
	cwport, cwportAllocMap := (C.uint)(wport), cgoAllocsUnknown
	cuAlg, cuAlgAllocMap := (C.uint)(uAlg), cgoAllocsUnknown
	cuserId, cuserIdAllocMap := copyPCharBytes((*sliceHeader)(unsafe.Pointer(&userId)))
	cdevId, cdevIdAllocMap := copyPCharBytes((*sliceHeader)(unsafe.Pointer(&devId)))
	cprvKey, cprvKeyAllocMap := prvKey, cgoAllocsUnknown
	cprvKeyLen, cprvKeyLenAllocMap := (C.int)(prvKeyLen), cgoAllocsUnknown
	cpubKey, cpubKeyAllocMap := pubKey, cgoAllocsUnknown
	cpubKeyLen, cpubKeyLenAllocMap := (C.int)(pubKeyLen), cgoAllocsUnknown
	__ret := C.XENGINESetSecurityEnv(csIp, cwport, cuAlg, cuserId, cdevId, cprvKey, cprvKeyLen, cpubKey, cpubKeyLen)
	runtime.KeepAlive(cpubKeyLenAllocMap)
	runtime.KeepAlive(cpubKeyAllocMap)
	runtime.KeepAlive(cprvKeyLenAllocMap)
	runtime.KeepAlive(cprvKeyAllocMap)
	runtime.KeepAlive(cdevIdAllocMap)
	runtime.KeepAlive(cuserIdAllocMap)
	runtime.KeepAlive(cuAlgAllocMap)
	runtime.KeepAlive(cwportAllocMap)
	runtime.KeepAlive(csIpAllocMap)
	__v := (int32)(__ret)
	return __v
}

// XENGINEFindSecurityEvn function as declared in mgmt/xengine_mgmt_op.h:1615
func XENGINEFindSecurityEvn(pServerIp []byte, wPort uint32) unsafe.Pointer {
	cpServerIp, cpServerIpAllocMap := copyPCharBytes((*sliceHeader)(unsafe.Pointer(&pServerIp)))
	cwPort, cwPortAllocMap := (C.uint)(wPort), cgoAllocsUnknown
	__ret := C.XENGINEFindSecurityEvn(cpServerIp, cwPort)
	runtime.KeepAlive(cwPortAllocMap)
	runtime.KeepAlive(cpServerIpAllocMap)
	__v := *(*unsafe.Pointer)(unsafe.Pointer(&__ret))
	return __v
}

// XENGINEDelSecurityEnv function as declared in mgmt/xengine_mgmt_op.h:1620
func XENGINEDelSecurityEnv(pServerIp []byte, wPort uint32) int32 {
	cpServerIp, cpServerIpAllocMap := copyPCharBytes((*sliceHeader)(unsafe.Pointer(&pServerIp)))
	cwPort, cwPortAllocMap := (C.uint)(wPort), cgoAllocsUnknown
	__ret := C.XENGINEDelSecurityEnv(cpServerIp, cwPort)
	runtime.KeepAlive(cwPortAllocMap)
	runtime.KeepAlive(cpServerIpAllocMap)
	__v := (int32)(__ret)
	return __v
}

// XENGINEClearSecurityEnv function as declared in mgmt/xengine_mgmt_op.h:1625
func XENGINEClearSecurityEnv() int32 {
	__ret := C.XENGINEClearSecurityEnv()
	__v := (int32)(__ret)
	return __v
}

// XENGINE_MgmtSetSvrPassword function as declared in mgmt/xengine_mgmt_op.h:1627
func XENGINE_MgmtSetSvrPassword(hEngineMgmt unsafe.Pointer, nIndex int32, nOp uint32, pPasswd []byte, nPassLen int32) int32 {
	chEngineMgmt, chEngineMgmtAllocMap := hEngineMgmt, cgoAllocsUnknown
	cnIndex, cnIndexAllocMap := (C.int)(nIndex), cgoAllocsUnknown
	cnOp, cnOpAllocMap := (C.uint)(nOp), cgoAllocsUnknown
	cpPasswd, cpPasswdAllocMap := copyPUcharBytes((*sliceHeader)(unsafe.Pointer(&pPasswd)))
	cnPassLen, cnPassLenAllocMap := (C.int)(nPassLen), cgoAllocsUnknown
	__ret := C.XENGINE_MgmtSetSvrPassword(chEngineMgmt, cnIndex, cnOp, cpPasswd, cnPassLen)
	runtime.KeepAlive(cnPassLenAllocMap)
	runtime.KeepAlive(cpPasswdAllocMap)
	runtime.KeepAlive(cnOpAllocMap)
	runtime.KeepAlive(cnIndexAllocMap)
	runtime.KeepAlive(chEngineMgmtAllocMap)
	__v := (int32)(__ret)
	return __v
}

// XENGINE_MgmtSetSRP5Password function as declared in mgmt/xengine_mgmt_op.h:1635
func XENGINE_MgmtSetSRP5Password(hEngineMgmt unsafe.Pointer, nOp uint32, pPasswd []byte, nPassLen int32) int32 {
	chEngineMgmt, chEngineMgmtAllocMap := hEngineMgmt, cgoAllocsUnknown
	cnOp, cnOpAllocMap := (C.uint)(nOp), cgoAllocsUnknown
	cpPasswd, cpPasswdAllocMap := copyPUcharBytes((*sliceHeader)(unsafe.Pointer(&pPasswd)))
	cnPassLen, cnPassLenAllocMap := (C.int)(nPassLen), cgoAllocsUnknown
	__ret := C.XENGINE_MgmtSetSRP5Password(chEngineMgmt, cnOp, cpPasswd, cnPassLen)
	runtime.KeepAlive(cnPassLenAllocMap)
	runtime.KeepAlive(cpPasswdAllocMap)
	runtime.KeepAlive(cnOpAllocMap)
	runtime.KeepAlive(chEngineMgmtAllocMap)
	__v := (int32)(__ret)
	return __v
}

// XENGINE_MgmtSetSRP5PasswordEx function as declared in mgmt/xengine_mgmt_op.h:1642
func XENGINE_MgmtSetSRP5PasswordEx(hEngineMgmt unsafe.Pointer, nOp uint32, pUser []byte, nUserLen int32, pPasswd []byte, nPassLen int32) int32 {
	chEngineMgmt, chEngineMgmtAllocMap := hEngineMgmt, cgoAllocsUnknown
	cnOp, cnOpAllocMap := (C.uint)(nOp), cgoAllocsUnknown
	cpUser, cpUserAllocMap := copyPUcharBytes((*sliceHeader)(unsafe.Pointer(&pUser)))
	cnUserLen, cnUserLenAllocMap := (C.int)(nUserLen), cgoAllocsUnknown
	cpPasswd, cpPasswdAllocMap := copyPUcharBytes((*sliceHeader)(unsafe.Pointer(&pPasswd)))
	cnPassLen, cnPassLenAllocMap := (C.int)(nPassLen), cgoAllocsUnknown
	__ret := C.XENGINE_MgmtSetSRP5PasswordEx(chEngineMgmt, cnOp, cpUser, cnUserLen, cpPasswd, cnPassLen)
	runtime.KeepAlive(cnPassLenAllocMap)
	runtime.KeepAlive(cpPasswdAllocMap)
	runtime.KeepAlive(cnUserLenAllocMap)
	runtime.KeepAlive(cpUserAllocMap)
	runtime.KeepAlive(cnOpAllocMap)
	runtime.KeepAlive(chEngineMgmtAllocMap)
	__v := (int32)(__ret)
	return __v
}

// XENGINE_SetSvrPassword_Encap function as declared in mgmt/xengine_mgmt_op.h:1651
func XENGINE_SetSvrPassword_Encap(ipAddress []byte, nPort uint16, nIndex int32, nOp uint32, pPasswd []byte, nPassLen int32) int32 {
	cipAddress, cipAddressAllocMap := copyPCharBytes((*sliceHeader)(unsafe.Pointer(&ipAddress)))
	cnPort, cnPortAllocMap := (C.ushort)(nPort), cgoAllocsUnknown
	cnIndex, cnIndexAllocMap := (C.int)(nIndex), cgoAllocsUnknown
	cnOp, cnOpAllocMap := (C.uint)(nOp), cgoAllocsUnknown
	cpPasswd, cpPasswdAllocMap := copyPUcharBytes((*sliceHeader)(unsafe.Pointer(&pPasswd)))
	cnPassLen, cnPassLenAllocMap := (C.int)(nPassLen), cgoAllocsUnknown
	__ret := C.XENGINE_SetSvrPassword_Encap(cipAddress, cnPort, cnIndex, cnOp, cpPasswd, cnPassLen)
	runtime.KeepAlive(cnPassLenAllocMap)
	runtime.KeepAlive(cpPasswdAllocMap)
	runtime.KeepAlive(cnOpAllocMap)
	runtime.KeepAlive(cnIndexAllocMap)
	runtime.KeepAlive(cnPortAllocMap)
	runtime.KeepAlive(cipAddressAllocMap)
	__v := (int32)(__ret)
	return __v
}

// XENGINE_SetSRP5Password_Encap function as declared in mgmt/xengine_mgmt_op.h:1660
func XENGINE_SetSRP5Password_Encap(ipAddress []byte, nPort uint16, nOp uint32, pPasswd []byte, nPassLen int32) int32 {
	cipAddress, cipAddressAllocMap := copyPCharBytes((*sliceHeader)(unsafe.Pointer(&ipAddress)))
	cnPort, cnPortAllocMap := (C.ushort)(nPort), cgoAllocsUnknown
	cnOp, cnOpAllocMap := (C.uint)(nOp), cgoAllocsUnknown
	cpPasswd, cpPasswdAllocMap := copyPUcharBytes((*sliceHeader)(unsafe.Pointer(&pPasswd)))
	cnPassLen, cnPassLenAllocMap := (C.int)(nPassLen), cgoAllocsUnknown
	__ret := C.XENGINE_SetSRP5Password_Encap(cipAddress, cnPort, cnOp, cpPasswd, cnPassLen)
	runtime.KeepAlive(cnPassLenAllocMap)
	runtime.KeepAlive(cpPasswdAllocMap)
	runtime.KeepAlive(cnOpAllocMap)
	runtime.KeepAlive(cnPortAllocMap)
	runtime.KeepAlive(cipAddressAllocMap)
	__v := (int32)(__ret)
	return __v
}

// XENGINE_SetSRP5Password_EncapEx function as declared in mgmt/xengine_mgmt_op.h:1668
func XENGINE_SetSRP5Password_EncapEx(ipAddress []byte, nPort uint16, nOp uint32, pUser []byte, nUserLen int32, pPasswd []byte, nPassLen int32) int32 {
	cipAddress, cipAddressAllocMap := copyPCharBytes((*sliceHeader)(unsafe.Pointer(&ipAddress)))
	cnPort, cnPortAllocMap := (C.ushort)(nPort), cgoAllocsUnknown
	cnOp, cnOpAllocMap := (C.uint)(nOp), cgoAllocsUnknown
	cpUser, cpUserAllocMap := copyPUcharBytes((*sliceHeader)(unsafe.Pointer(&pUser)))
	cnUserLen, cnUserLenAllocMap := (C.int)(nUserLen), cgoAllocsUnknown
	cpPasswd, cpPasswdAllocMap := copyPUcharBytes((*sliceHeader)(unsafe.Pointer(&pPasswd)))
	cnPassLen, cnPassLenAllocMap := (C.int)(nPassLen), cgoAllocsUnknown
	__ret := C.XENGINE_SetSRP5Password_EncapEx(cipAddress, cnPort, cnOp, cpUser, cnUserLen, cpPasswd, cnPassLen)
	runtime.KeepAlive(cnPassLenAllocMap)
	runtime.KeepAlive(cpPasswdAllocMap)
	runtime.KeepAlive(cnUserLenAllocMap)
	runtime.KeepAlive(cpUserAllocMap)
	runtime.KeepAlive(cnOpAllocMap)
	runtime.KeepAlive(cnPortAllocMap)
	runtime.KeepAlive(cipAddressAllocMap)
	__v := (int32)(__ret)
	return __v
}

// XENGINE_SetSvrCredential_Encap function as declared in mgmt/xengine_mgmt_op.h:1678
func XENGINE_SetSvrCredential_Encap(ipAddress []byte, nPort uint16, nIndex int32, nShare uint32, pPasswd []byte, nPassLen int32) int32 {
	cipAddress, cipAddressAllocMap := copyPCharBytes((*sliceHeader)(unsafe.Pointer(&ipAddress)))
	cnPort, cnPortAllocMap := (C.ushort)(nPort), cgoAllocsUnknown
	cnIndex, cnIndexAllocMap := (C.int)(nIndex), cgoAllocsUnknown
	cnShare, cnShareAllocMap := (C.uint)(nShare), cgoAllocsUnknown
	cpPasswd, cpPasswdAllocMap := copyPUcharBytes((*sliceHeader)(unsafe.Pointer(&pPasswd)))
	cnPassLen, cnPassLenAllocMap := (C.int)(nPassLen), cgoAllocsUnknown
	__ret := C.XENGINE_SetSvrCredential_Encap(cipAddress, cnPort, cnIndex, cnShare, cpPasswd, cnPassLen)
	runtime.KeepAlive(cnPassLenAllocMap)
	runtime.KeepAlive(cpPasswdAllocMap)
	runtime.KeepAlive(cnShareAllocMap)
	runtime.KeepAlive(cnIndexAllocMap)
	runtime.KeepAlive(cnPortAllocMap)
	runtime.KeepAlive(cipAddressAllocMap)
	__v := (int32)(__ret)
	return __v
}

// XENGINE_SetSvrCredentialEx_Encap function as declared in mgmt/xengine_mgmt_op.h:1687
func XENGINE_SetSvrCredentialEx_Encap(ipAddress []byte, nPort uint16, nSuitIndex int32, nShare uint32, nRedun uint32, nKgcIndex int32, nParam int32, nOption uint32, pPasswd []byte, nPassLen int32, pUser []byte, nUserLen int32, pServer []byte, nServerLen int32, nServerPort int32, nTotlRedun uint32, nTotlShare uint32) int32 {
	cipAddress, cipAddressAllocMap := copyPCharBytes((*sliceHeader)(unsafe.Pointer(&ipAddress)))
	cnPort, cnPortAllocMap := (C.ushort)(nPort), cgoAllocsUnknown
	cnSuitIndex, cnSuitIndexAllocMap := (C.int)(nSuitIndex), cgoAllocsUnknown
	cnShare, cnShareAllocMap := (C.uint)(nShare), cgoAllocsUnknown
	cnRedun, cnRedunAllocMap := (C.uint)(nRedun), cgoAllocsUnknown
	cnKgcIndex, cnKgcIndexAllocMap := (C.int)(nKgcIndex), cgoAllocsUnknown
	cnParam, cnParamAllocMap := (C.int)(nParam), cgoAllocsUnknown
	cnOption, cnOptionAllocMap := (C.uint)(nOption), cgoAllocsUnknown
	cpPasswd, cpPasswdAllocMap := copyPUcharBytes((*sliceHeader)(unsafe.Pointer(&pPasswd)))
	cnPassLen, cnPassLenAllocMap := (C.int)(nPassLen), cgoAllocsUnknown
	cpUser, cpUserAllocMap := copyPUcharBytes((*sliceHeader)(unsafe.Pointer(&pUser)))
	cnUserLen, cnUserLenAllocMap := (C.int)(nUserLen), cgoAllocsUnknown
	cpServer, cpServerAllocMap := copyPUcharBytes((*sliceHeader)(unsafe.Pointer(&pServer)))
	cnServerLen, cnServerLenAllocMap := (C.int)(nServerLen), cgoAllocsUnknown
	cnServerPort, cnServerPortAllocMap := (C.int)(nServerPort), cgoAllocsUnknown
	cnTotlRedun, cnTotlRedunAllocMap := (C.uint)(nTotlRedun), cgoAllocsUnknown
	cnTotlShare, cnTotlShareAllocMap := (C.uint)(nTotlShare), cgoAllocsUnknown
	__ret := C.XENGINE_SetSvrCredentialEx_Encap(cipAddress, cnPort, cnSuitIndex, cnShare, cnRedun, cnKgcIndex, cnParam, cnOption, cpPasswd, cnPassLen, cpUser, cnUserLen, cpServer, cnServerLen, cnServerPort, cnTotlRedun, cnTotlShare)
	runtime.KeepAlive(cnTotlShareAllocMap)
	runtime.KeepAlive(cnTotlRedunAllocMap)
	runtime.KeepAlive(cnServerPortAllocMap)
	runtime.KeepAlive(cnServerLenAllocMap)
	runtime.KeepAlive(cpServerAllocMap)
	runtime.KeepAlive(cnUserLenAllocMap)
	runtime.KeepAlive(cpUserAllocMap)
	runtime.KeepAlive(cnPassLenAllocMap)
	runtime.KeepAlive(cpPasswdAllocMap)
	runtime.KeepAlive(cnOptionAllocMap)
	runtime.KeepAlive(cnParamAllocMap)
	runtime.KeepAlive(cnKgcIndexAllocMap)
	runtime.KeepAlive(cnRedunAllocMap)
	runtime.KeepAlive(cnShareAllocMap)
	runtime.KeepAlive(cnSuitIndexAllocMap)
	runtime.KeepAlive(cnPortAllocMap)
	runtime.KeepAlive(cipAddressAllocMap)
	__v := (int32)(__ret)
	return __v
}

// XENGINE_MgmtSetSvrCredential function as declared in mgmt/xengine_mgmt_op.h:1707
func XENGINE_MgmtSetSvrCredential(hEngineMgmt unsafe.Pointer, nIndex int32, nShare uint32, pPasswd []byte, nPassLen int32) int32 {
	chEngineMgmt, chEngineMgmtAllocMap := hEngineMgmt, cgoAllocsUnknown
	cnIndex, cnIndexAllocMap := (C.int)(nIndex), cgoAllocsUnknown
	cnShare, cnShareAllocMap := (C.uint)(nShare), cgoAllocsUnknown
	cpPasswd, cpPasswdAllocMap := copyPUcharBytes((*sliceHeader)(unsafe.Pointer(&pPasswd)))
	cnPassLen, cnPassLenAllocMap := (C.int)(nPassLen), cgoAllocsUnknown
	__ret := C.XENGINE_MgmtSetSvrCredential(chEngineMgmt, cnIndex, cnShare, cpPasswd, cnPassLen)
	runtime.KeepAlive(cnPassLenAllocMap)
	runtime.KeepAlive(cpPasswdAllocMap)
	runtime.KeepAlive(cnShareAllocMap)
	runtime.KeepAlive(cnIndexAllocMap)
	runtime.KeepAlive(chEngineMgmtAllocMap)
	__v := (int32)(__ret)
	return __v
}

// XENGINE_MgmtGetCredential function as declared in mgmt/xengine_mgmt_op.h:1715
func XENGINE_MgmtGetCredential(hEngineMgmt unsafe.Pointer, nIndex int32, nOp uint32, pPasswd []byte, nPassLen []uint32) int32 {
	chEngineMgmt, chEngineMgmtAllocMap := hEngineMgmt, cgoAllocsUnknown
	cnIndex, cnIndexAllocMap := (C.int)(nIndex), cgoAllocsUnknown
	cnOp, cnOpAllocMap := (C.uint)(nOp), cgoAllocsUnknown
	cpPasswd, cpPasswdAllocMap := copyPUcharBytes((*sliceHeader)(unsafe.Pointer(&pPasswd)))
	cnPassLen, cnPassLenAllocMap := copyPUintBytes((*sliceHeader)(unsafe.Pointer(&nPassLen)))
	__ret := C.XENGINE_MgmtGetCredential(chEngineMgmt, cnIndex, cnOp, cpPasswd, cnPassLen)
	runtime.KeepAlive(cnPassLenAllocMap)
	runtime.KeepAlive(cpPasswdAllocMap)
	runtime.KeepAlive(cnOpAllocMap)
	runtime.KeepAlive(cnIndexAllocMap)
	runtime.KeepAlive(chEngineMgmtAllocMap)
	__v := (int32)(__ret)
	return __v
}

// XENGINE_MgmtSetSvrCredentialEx function as declared in mgmt/xengine_mgmt_op.h:1725
func XENGINE_MgmtSetSvrCredentialEx(hEngineMgmt unsafe.Pointer, nSuitIndex int32, nShare uint32, nRedun uint32, nKgcIndex uint32, nParam int32, nOption uint32, pPasswd []byte, nPassLen int32, pUser []byte, nUserLen int32, pServer []byte, nServerLen int32, nPort int32, nTotlRedun uint32, nTotlShare uint32) int32 {
	chEngineMgmt, chEngineMgmtAllocMap := hEngineMgmt, cgoAllocsUnknown
	cnSuitIndex, cnSuitIndexAllocMap := (C.int)(nSuitIndex), cgoAllocsUnknown
	cnShare, cnShareAllocMap := (C.uint)(nShare), cgoAllocsUnknown
	cnRedun, cnRedunAllocMap := (C.uint)(nRedun), cgoAllocsUnknown
	cnKgcIndex, cnKgcIndexAllocMap := (C.uint)(nKgcIndex), cgoAllocsUnknown
	cnParam, cnParamAllocMap := (C.int)(nParam), cgoAllocsUnknown
	cnOption, cnOptionAllocMap := (C.uint)(nOption), cgoAllocsUnknown
	cpPasswd, cpPasswdAllocMap := copyPUcharBytes((*sliceHeader)(unsafe.Pointer(&pPasswd)))
	cnPassLen, cnPassLenAllocMap := (C.int)(nPassLen), cgoAllocsUnknown
	cpUser, cpUserAllocMap := copyPUcharBytes((*sliceHeader)(unsafe.Pointer(&pUser)))
	cnUserLen, cnUserLenAllocMap := (C.int)(nUserLen), cgoAllocsUnknown
	cpServer, cpServerAllocMap := copyPUcharBytes((*sliceHeader)(unsafe.Pointer(&pServer)))
	cnServerLen, cnServerLenAllocMap := (C.int)(nServerLen), cgoAllocsUnknown
	cnPort, cnPortAllocMap := (C.int)(nPort), cgoAllocsUnknown
	cnTotlRedun, cnTotlRedunAllocMap := (C.uint)(nTotlRedun), cgoAllocsUnknown
	cnTotlShare, cnTotlShareAllocMap := (C.uint)(nTotlShare), cgoAllocsUnknown
	__ret := C.XENGINE_MgmtSetSvrCredentialEx(chEngineMgmt, cnSuitIndex, cnShare, cnRedun, cnKgcIndex, cnParam, cnOption, cpPasswd, cnPassLen, cpUser, cnUserLen, cpServer, cnServerLen, cnPort, cnTotlRedun, cnTotlShare)
	runtime.KeepAlive(cnTotlShareAllocMap)
	runtime.KeepAlive(cnTotlRedunAllocMap)
	runtime.KeepAlive(cnPortAllocMap)
	runtime.KeepAlive(cnServerLenAllocMap)
	runtime.KeepAlive(cpServerAllocMap)
	runtime.KeepAlive(cnUserLenAllocMap)
	runtime.KeepAlive(cpUserAllocMap)
	runtime.KeepAlive(cnPassLenAllocMap)
	runtime.KeepAlive(cpPasswdAllocMap)
	runtime.KeepAlive(cnOptionAllocMap)
	runtime.KeepAlive(cnParamAllocMap)
	runtime.KeepAlive(cnKgcIndexAllocMap)
	runtime.KeepAlive(cnRedunAllocMap)
	runtime.KeepAlive(cnShareAllocMap)
	runtime.KeepAlive(cnSuitIndexAllocMap)
	runtime.KeepAlive(chEngineMgmtAllocMap)
	__v := (int32)(__ret)
	return __v
}

// XENGINE_MgmtSvrAccessInfo function as declared in mgmt/xengine_mgmt_op.h:1746
func XENGINE_MgmtSvrAccessInfo(hEngineMgmt unsafe.Pointer, nIndex int32, nOperation uint32, pInfo []byte, nInfoLen []uint32) int32 {
	chEngineMgmt, chEngineMgmtAllocMap := hEngineMgmt, cgoAllocsUnknown
	cnIndex, cnIndexAllocMap := (C.int)(nIndex), cgoAllocsUnknown
	cnOperation, cnOperationAllocMap := (C.uint)(nOperation), cgoAllocsUnknown
	cpInfo, cpInfoAllocMap := copyPUcharBytes((*sliceHeader)(unsafe.Pointer(&pInfo)))
	cnInfoLen, cnInfoLenAllocMap := copyPUintBytes((*sliceHeader)(unsafe.Pointer(&nInfoLen)))
	__ret := C.XENGINE_MgmtSvrAccessInfo(chEngineMgmt, cnIndex, cnOperation, cpInfo, cnInfoLen)
	runtime.KeepAlive(cnInfoLenAllocMap)
	runtime.KeepAlive(cpInfoAllocMap)
	runtime.KeepAlive(cnOperationAllocMap)
	runtime.KeepAlive(cnIndexAllocMap)
	runtime.KeepAlive(chEngineMgmtAllocMap)
	__v := (int32)(__ret)
	return __v
}

// XENGINE_ManageSvrAccessInfo_Encap function as declared in mgmt/xengine_mgmt_op.h:1754
func XENGINE_ManageSvrAccessInfo_Encap(ipAddress []byte, nPort uint16, nIndex int32, nOperation uint32, pInfo []byte, nInfoLen []uint32) int32 {
	cipAddress, cipAddressAllocMap := copyPCharBytes((*sliceHeader)(unsafe.Pointer(&ipAddress)))
	cnPort, cnPortAllocMap := (C.ushort)(nPort), cgoAllocsUnknown
	cnIndex, cnIndexAllocMap := (C.int)(nIndex), cgoAllocsUnknown
	cnOperation, cnOperationAllocMap := (C.uint)(nOperation), cgoAllocsUnknown
	cpInfo, cpInfoAllocMap := copyPUcharBytes((*sliceHeader)(unsafe.Pointer(&pInfo)))
	cnInfoLen, cnInfoLenAllocMap := copyPUintBytes((*sliceHeader)(unsafe.Pointer(&nInfoLen)))
	__ret := C.XENGINE_ManageSvrAccessInfo_Encap(cipAddress, cnPort, cnIndex, cnOperation, cpInfo, cnInfoLen)
	runtime.KeepAlive(cnInfoLenAllocMap)
	runtime.KeepAlive(cpInfoAllocMap)
	runtime.KeepAlive(cnOperationAllocMap)
	runtime.KeepAlive(cnIndexAllocMap)
	runtime.KeepAlive(cnPortAllocMap)
	runtime.KeepAlive(cipAddressAllocMap)
	__v := (int32)(__ret)
	return __v
}

// XENGINE_MgmtSvrXconfigInfo function as declared in mgmt/xengine_mgmt_op.h:1767
func XENGINE_MgmtSvrXconfigInfo(hEngineMgmt unsafe.Pointer, nIndex int32, nOperation uint32, pInfo []byte, nInfoLen []uint32) int32 {
	chEngineMgmt, chEngineMgmtAllocMap := hEngineMgmt, cgoAllocsUnknown
	cnIndex, cnIndexAllocMap := (C.int)(nIndex), cgoAllocsUnknown
	cnOperation, cnOperationAllocMap := (C.uint)(nOperation), cgoAllocsUnknown
	cpInfo, cpInfoAllocMap := copyPUcharBytes((*sliceHeader)(unsafe.Pointer(&pInfo)))
	cnInfoLen, cnInfoLenAllocMap := copyPUintBytes((*sliceHeader)(unsafe.Pointer(&nInfoLen)))
	__ret := C.XENGINE_MgmtSvrXconfigInfo(chEngineMgmt, cnIndex, cnOperation, cpInfo, cnInfoLen)
	runtime.KeepAlive(cnInfoLenAllocMap)
	runtime.KeepAlive(cpInfoAllocMap)
	runtime.KeepAlive(cnOperationAllocMap)
	runtime.KeepAlive(cnIndexAllocMap)
	runtime.KeepAlive(chEngineMgmtAllocMap)
	__v := (int32)(__ret)
	return __v
}

// XENGINE_ManageSvrXconfigInfo_Encap function as declared in mgmt/xengine_mgmt_op.h:1775
func XENGINE_ManageSvrXconfigInfo_Encap(ipAddress []byte, nPort uint16, nIndex int32, nOperation uint32, pInfo []byte, nInfoLen []uint32) int32 {
	cipAddress, cipAddressAllocMap := copyPCharBytes((*sliceHeader)(unsafe.Pointer(&ipAddress)))
	cnPort, cnPortAllocMap := (C.ushort)(nPort), cgoAllocsUnknown
	cnIndex, cnIndexAllocMap := (C.int)(nIndex), cgoAllocsUnknown
	cnOperation, cnOperationAllocMap := (C.uint)(nOperation), cgoAllocsUnknown
	cpInfo, cpInfoAllocMap := copyPUcharBytes((*sliceHeader)(unsafe.Pointer(&pInfo)))
	cnInfoLen, cnInfoLenAllocMap := copyPUintBytes((*sliceHeader)(unsafe.Pointer(&nInfoLen)))
	__ret := C.XENGINE_ManageSvrXconfigInfo_Encap(cipAddress, cnPort, cnIndex, cnOperation, cpInfo, cnInfoLen)
	runtime.KeepAlive(cnInfoLenAllocMap)
	runtime.KeepAlive(cpInfoAllocMap)
	runtime.KeepAlive(cnOperationAllocMap)
	runtime.KeepAlive(cnIndexAllocMap)
	runtime.KeepAlive(cnPortAllocMap)
	runtime.KeepAlive(cipAddressAllocMap)
	__v := (int32)(__ret)
	return __v
}

// XENGINE_MgmtServiceOp function as declared in mgmt/xengine_mgmt_op.h:1793
func XENGINE_MgmtServiceOp(hEngineMgmt unsafe.Pointer, nOp int32) int32 {
	chEngineMgmt, chEngineMgmtAllocMap := hEngineMgmt, cgoAllocsUnknown
	cnOp, cnOpAllocMap := (C.int)(nOp), cgoAllocsUnknown
	__ret := C.XENGINE_MgmtServiceOp(chEngineMgmt, cnOp)
	runtime.KeepAlive(cnOpAllocMap)
	runtime.KeepAlive(chEngineMgmtAllocMap)
	__v := (int32)(__ret)
	return __v
}

// XENGINE_MgmtServiceOp_Encap function as declared in mgmt/xengine_mgmt_op.h:1798
func XENGINE_MgmtServiceOp_Encap(ipAddress []byte, nPort uint16, nOp int32) int32 {
	cipAddress, cipAddressAllocMap := copyPCharBytes((*sliceHeader)(unsafe.Pointer(&ipAddress)))
	cnPort, cnPortAllocMap := (C.ushort)(nPort), cgoAllocsUnknown
	cnOp, cnOpAllocMap := (C.int)(nOp), cgoAllocsUnknown
	__ret := C.XENGINE_MgmtServiceOp_Encap(cipAddress, cnPort, cnOp)
	runtime.KeepAlive(cnOpAllocMap)
	runtime.KeepAlive(cnPortAllocMap)
	runtime.KeepAlive(cipAddressAllocMap)
	__v := (int32)(__ret)
	return __v
}

// XENGINE_MgmtGetFileSegment function as declared in mgmt/xengine_mgmt_op.h:1804
func XENGINE_MgmtGetFileSegment(hEngineMgmt unsafe.Pointer, nFileType uint32, nOffset int64, pFileSeg []byte, pnSegLen []uint32) int32 {
	chEngineMgmt, chEngineMgmtAllocMap := hEngineMgmt, cgoAllocsUnknown
	cnFileType, cnFileTypeAllocMap := (C.uint)(nFileType), cgoAllocsUnknown
	cnOffset, cnOffsetAllocMap := (C.longlong)(nOffset), cgoAllocsUnknown
	cpFileSeg, cpFileSegAllocMap := copyPUcharBytes((*sliceHeader)(unsafe.Pointer(&pFileSeg)))
	cpnSegLen, cpnSegLenAllocMap := copyPUintBytes((*sliceHeader)(unsafe.Pointer(&pnSegLen)))
	__ret := C.XENGINE_MgmtGetFileSegment(chEngineMgmt, cnFileType, cnOffset, cpFileSeg, cpnSegLen)
	runtime.KeepAlive(cpnSegLenAllocMap)
	runtime.KeepAlive(cpFileSegAllocMap)
	runtime.KeepAlive(cnOffsetAllocMap)
	runtime.KeepAlive(cnFileTypeAllocMap)
	runtime.KeepAlive(chEngineMgmtAllocMap)
	__v := (int32)(__ret)
	return __v
}

// XENGINE_GetFileSegment_Encap function as declared in mgmt/xengine_mgmt_op.h:1814
func XENGINE_GetFileSegment_Encap(ipAddress []byte, nPort uint16, nFileType uint32, nOffset int64, pFileSeg []byte, pnSegLen []uint32) int32 {
	cipAddress, cipAddressAllocMap := copyPCharBytes((*sliceHeader)(unsafe.Pointer(&ipAddress)))
	cnPort, cnPortAllocMap := (C.ushort)(nPort), cgoAllocsUnknown
	cnFileType, cnFileTypeAllocMap := (C.uint)(nFileType), cgoAllocsUnknown
	cnOffset, cnOffsetAllocMap := (C.longlong)(nOffset), cgoAllocsUnknown
	cpFileSeg, cpFileSegAllocMap := copyPUcharBytes((*sliceHeader)(unsafe.Pointer(&pFileSeg)))
	cpnSegLen, cpnSegLenAllocMap := copyPUintBytes((*sliceHeader)(unsafe.Pointer(&pnSegLen)))
	__ret := C.XENGINE_GetFileSegment_Encap(cipAddress, cnPort, cnFileType, cnOffset, cpFileSeg, cpnSegLen)
	runtime.KeepAlive(cpnSegLenAllocMap)
	runtime.KeepAlive(cpFileSegAllocMap)
	runtime.KeepAlive(cnOffsetAllocMap)
	runtime.KeepAlive(cnFileTypeAllocMap)
	runtime.KeepAlive(cnPortAllocMap)
	runtime.KeepAlive(cipAddressAllocMap)
	__v := (int32)(__ret)
	return __v
}

// XENGINE_MgmtDeviceConfig function as declared in mgmt/xengine_mgmt_op.h:1823
func XENGINE_MgmtDeviceConfig(hEngineMgmt unsafe.Pointer, pData []byte, pnDataLen []uint32) int32 {
	chEngineMgmt, chEngineMgmtAllocMap := hEngineMgmt, cgoAllocsUnknown
	cpData, cpDataAllocMap := copyPUcharBytes((*sliceHeader)(unsafe.Pointer(&pData)))
	cpnDataLen, cpnDataLenAllocMap := copyPUintBytes((*sliceHeader)(unsafe.Pointer(&pnDataLen)))
	__ret := C.XENGINE_MgmtDeviceConfig(chEngineMgmt, cpData, cpnDataLen)
	runtime.KeepAlive(cpnDataLenAllocMap)
	runtime.KeepAlive(cpDataAllocMap)
	runtime.KeepAlive(chEngineMgmtAllocMap)
	__v := (int32)(__ret)
	return __v
}

// XENGINE_DeviceConfig_Encap function as declared in mgmt/xengine_mgmt_op.h:1829
func XENGINE_DeviceConfig_Encap(ipAddress []byte, nPort uint16, pData []byte, pnDataLen []uint32) int32 {
	cipAddress, cipAddressAllocMap := copyPCharBytes((*sliceHeader)(unsafe.Pointer(&ipAddress)))
	cnPort, cnPortAllocMap := (C.ushort)(nPort), cgoAllocsUnknown
	cpData, cpDataAllocMap := copyPUcharBytes((*sliceHeader)(unsafe.Pointer(&pData)))
	cpnDataLen, cpnDataLenAllocMap := copyPUintBytes((*sliceHeader)(unsafe.Pointer(&pnDataLen)))
	__ret := C.XENGINE_DeviceConfig_Encap(cipAddress, cnPort, cpData, cpnDataLen)
	runtime.KeepAlive(cpnDataLenAllocMap)
	runtime.KeepAlive(cpDataAllocMap)
	runtime.KeepAlive(cnPortAllocMap)
	runtime.KeepAlive(cipAddressAllocMap)
	__v := (int32)(__ret)
	return __v
}

// XENGINE_MgmtHealthCheck function as declared in mgmt/xengine_mgmt_op.h:1846
func XENGINE_MgmtHealthCheck(hEngineMgmt unsafe.Pointer, nItem uint32, pData []byte, pnDataLen []uint32) int32 {
	chEngineMgmt, chEngineMgmtAllocMap := hEngineMgmt, cgoAllocsUnknown
	cnItem, cnItemAllocMap := (C.uint)(nItem), cgoAllocsUnknown
	cpData, cpDataAllocMap := copyPUcharBytes((*sliceHeader)(unsafe.Pointer(&pData)))
	cpnDataLen, cpnDataLenAllocMap := copyPUintBytes((*sliceHeader)(unsafe.Pointer(&pnDataLen)))
	__ret := C.XENGINE_MgmtHealthCheck(chEngineMgmt, cnItem, cpData, cpnDataLen)
	runtime.KeepAlive(cpnDataLenAllocMap)
	runtime.KeepAlive(cpDataAllocMap)
	runtime.KeepAlive(cnItemAllocMap)
	runtime.KeepAlive(chEngineMgmtAllocMap)
	__v := (int32)(__ret)
	return __v
}

// XENGINE_HealthCheck_Encap function as declared in mgmt/xengine_mgmt_op.h:1853
func XENGINE_HealthCheck_Encap(ipAddress []byte, nPort uint16, nItem uint32, pData []byte, pnDataLen []uint32) int32 {
	cipAddress, cipAddressAllocMap := copyPCharBytes((*sliceHeader)(unsafe.Pointer(&ipAddress)))
	cnPort, cnPortAllocMap := (C.ushort)(nPort), cgoAllocsUnknown
	cnItem, cnItemAllocMap := (C.uint)(nItem), cgoAllocsUnknown
	cpData, cpDataAllocMap := copyPUcharBytes((*sliceHeader)(unsafe.Pointer(&pData)))
	cpnDataLen, cpnDataLenAllocMap := copyPUintBytes((*sliceHeader)(unsafe.Pointer(&pnDataLen)))
	__ret := C.XENGINE_HealthCheck_Encap(cipAddress, cnPort, cnItem, cpData, cpnDataLen)
	runtime.KeepAlive(cpnDataLenAllocMap)
	runtime.KeepAlive(cpDataAllocMap)
	runtime.KeepAlive(cnItemAllocMap)
	runtime.KeepAlive(cnPortAllocMap)
	runtime.KeepAlive(cipAddressAllocMap)
	__v := (int32)(__ret)
	return __v
}

// XENGINE_MgmtSetConfig function as declared in mgmt/xengine_mgmt_op.h:1867
func XENGINE_MgmtSetConfig(nConfigAttr uint32, pConfigValue unsafe.Pointer, nConfigLen uint32) int32 {
	cnConfigAttr, cnConfigAttrAllocMap := (C.uint)(nConfigAttr), cgoAllocsUnknown
	cpConfigValue, cpConfigValueAllocMap := pConfigValue, cgoAllocsUnknown
	cnConfigLen, cnConfigLenAllocMap := (C.uint)(nConfigLen), cgoAllocsUnknown
	__ret := C.XENGINE_MgmtSetConfig(cnConfigAttr, cpConfigValue, cnConfigLen)
	runtime.KeepAlive(cnConfigLenAllocMap)
	runtime.KeepAlive(cpConfigValueAllocMap)
	runtime.KeepAlive(cnConfigAttrAllocMap)
	__v := (int32)(__ret)
	return __v
}

// XENGINE_SetLMKKey_Encap function as declared in mgmt/xengine_mgmt_op.h:1873
func XENGINE_SetLMKKey_Encap(ipAddress []byte, nPort uint16, eMode int32, pProtectKey []byte, nProtectKeyLen int32, pKeyData []byte, nKeyLen int32) int32 {
	cipAddress, cipAddressAllocMap := copyPCharBytes((*sliceHeader)(unsafe.Pointer(&ipAddress)))
	cnPort, cnPortAllocMap := (C.ushort)(nPort), cgoAllocsUnknown
	ceMode, ceModeAllocMap := (C.MkeyProtectMode_e)(eMode), cgoAllocsUnknown
	cpProtectKey, cpProtectKeyAllocMap := copyPUcharBytes((*sliceHeader)(unsafe.Pointer(&pProtectKey)))
	cnProtectKeyLen, cnProtectKeyLenAllocMap := (C.int)(nProtectKeyLen), cgoAllocsUnknown
	cpKeyData, cpKeyDataAllocMap := copyPUcharBytes((*sliceHeader)(unsafe.Pointer(&pKeyData)))
	cnKeyLen, cnKeyLenAllocMap := (C.int)(nKeyLen), cgoAllocsUnknown
	__ret := C.XENGINE_SetLMKKey_Encap(cipAddress, cnPort, ceMode, cpProtectKey, cnProtectKeyLen, cpKeyData, cnKeyLen)
	runtime.KeepAlive(cnKeyLenAllocMap)
	runtime.KeepAlive(cpKeyDataAllocMap)
	runtime.KeepAlive(cnProtectKeyLenAllocMap)
	runtime.KeepAlive(cpProtectKeyAllocMap)
	runtime.KeepAlive(ceModeAllocMap)
	runtime.KeepAlive(cnPortAllocMap)
	runtime.KeepAlive(cipAddressAllocMap)
	__v := (int32)(__ret)
	return __v
}

// XENGINE_ReadLMKKey_Encap function as declared in mgmt/xengine_mgmt_op.h:1883
func XENGINE_ReadLMKKey_Encap(ipAddress []byte, nPort uint16, eMode int32, pProtectKey []byte, nProtectKeyLen int32, pData []byte, pnDataLen []uint32) int32 {
	cipAddress, cipAddressAllocMap := copyPCharBytes((*sliceHeader)(unsafe.Pointer(&ipAddress)))
	cnPort, cnPortAllocMap := (C.ushort)(nPort), cgoAllocsUnknown
	ceMode, ceModeAllocMap := (C.MkeyProtectMode_e)(eMode), cgoAllocsUnknown
	cpProtectKey, cpProtectKeyAllocMap := copyPUcharBytes((*sliceHeader)(unsafe.Pointer(&pProtectKey)))
	cnProtectKeyLen, cnProtectKeyLenAllocMap := (C.int)(nProtectKeyLen), cgoAllocsUnknown
	cpData, cpDataAllocMap := copyPUcharBytes((*sliceHeader)(unsafe.Pointer(&pData)))
	cpnDataLen, cpnDataLenAllocMap := copyPUintBytes((*sliceHeader)(unsafe.Pointer(&pnDataLen)))
	__ret := C.XENGINE_ReadLMKKey_Encap(cipAddress, cnPort, ceMode, cpProtectKey, cnProtectKeyLen, cpData, cpnDataLen)
	runtime.KeepAlive(cpnDataLenAllocMap)
	runtime.KeepAlive(cpDataAllocMap)
	runtime.KeepAlive(cnProtectKeyLenAllocMap)
	runtime.KeepAlive(cpProtectKeyAllocMap)
	runtime.KeepAlive(ceModeAllocMap)
	runtime.KeepAlive(cnPortAllocMap)
	runtime.KeepAlive(cipAddressAllocMap)
	__v := (int32)(__ret)
	return __v
}

// XENGINE_XM_Version function as declared in mgmt/xengine_mgmt_op.h:1895
func XENGINE_XM_Version(ver []byte) {
	cver, cverAllocMap := copyPCharBytes((*sliceHeader)(unsafe.Pointer(&ver)))
	C.XENGINE_XM_Version(cver)
	runtime.KeepAlive(cverAllocMap)
}
